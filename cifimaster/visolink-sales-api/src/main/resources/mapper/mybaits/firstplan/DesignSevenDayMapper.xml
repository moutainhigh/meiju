<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.visolink.firstplan.fpdesigntwo.dao.DesignSevenDao">

    <!-- 首开前7天数据，首开审批表数据-->
    <select id="selectSevenDayIndex" parameterType="java.util.Map"  resultType="java.util.Map">


SELECT
  id,
  plan_id,
  plan_node_id,
  product_type_code,
  invest_open_node,
  invest_product_type,
  invest_take_card_value,
  invest_push_value,
  invest_selling_value,
  invest_avg_price,
  invest_operation_price,
  invest_take_card_per,
  invest_this_per,
  invest_all_per,
  invest_irr,
  invest_payback,
  rules_open_node,
  rules_product_type,
  rules_take_card_value,
  rules_push_value,
  rules_selling_value,
  rules_avg_price,
  rules_operation_price,
  rules_take_card_per,
  rules_this_per,
  rules_all_per,
  rules_irr,
  rules_payback,
  designtwo_open_node,
  designtwo_product_type,
  designtwo_take_card_value,
  designtwo_push_value,
  designtwo_selling_value,
  designtwo_avg_price,
  designtwo_operation_price,
  designtwo_take_card_per,
  designtwo_this_per,
  designtwo_all_per,
  designtwo_irr,
  designtwo_payback,
  estimate_open_node,
  estimate_product_type,
  estimate_take_card_value,
  estimate_push_value,
  estimate_selling_value,
  estimate_avg_price,
  estimate_operation_price,
  estimate_take_card_per,
  estimate_this_per,
  estimate_all_per,
  estimate_irr,
  estimate_payback,
  deviation_open_node,
  deviation_product_type,
  deviation_take_card_value,
  deviation_push_value,
  deviation_selling_value,
  deviation_avg_price,
  deviation_operation_price,
  deviation_take_card_per,
  deviation_this_per,
  deviation_all_per,
  deviation_irr,
  deviation_payback,
  deviationper_open_node,
  deviationper_product_type,
  deviationper_take_card_value,
  deviationper_push_value,
  deviationper_selling_value,
  deviationper_avg_price,
  deviationper_operation_price,
  deviationper_take_card_per,
  deviationper_this_per,
  deviationper_all_per,
  deviationper_irr,
  deviationper_payback,
  cause_open_node,
  cause_product_type,
  cause_take_card_value,
  cause_push_value,
  cause_selling_value,
  cause_avg_price,
  cause_operation_price,
  cause_take_card_per,
  cause_this_per,
  cause_all_per,
  cause_irr,
  cause_payback,
  competing_relation,
  competing_product,
  plate_dynamic,
  competing_condition,
  repot_customer_target,
  repot_customer_actual,
  repot_customer_per,
  come_way,
  come_customer_target,
  come_customer_actual,
  come_customer_per,
  lesser_way,
  lesser_customer_target,
  lesser_customer_actual,
  lesser_customer_per,
  big_way,
  big_customer_target,
  big_customer_actual,
  big_customer_per,
  sub_customer_target,
  sub_customer_actual,
  sub_customer_per,
  this_customer_visit,
  this_customer_conversionper,
  customer_cause,
  trader_open_prediction
FROM  fp_seven_day_index
WHERE
  plan_node_id=#{plan_node_id}

</select>

    <!-- 找到首开审批表数据，来自别的表-->
   <select id="selectNewSevenDayIndex"  parameterType="java.util.Map"  resultType="java.util.Map" >
       SELECT
UUID() AS id,
  plan_id,


  product_type_code,


  invest_time invest_open_node,
  invest_real_type invest_product_type,

  invest_take_card_value,
  invest_push_value,
  invest_selling_value,
	invest_take_card_per,
  invest_create_per invest_this_per,
  invest_all_per,
  invest_irr,
  invest_payback,



  rules_time rules_open_node,
  rules_real_type rules_product_type,

  rules_take_card_value,
  rules_push_value,
  rules_selling_value,
 rules_take_card_per ,
  rules_create_per  rules_this_per,
  rules_all_per,
  rules_irr,
  rules_payback,



  designtwo_time ,
  designtwo_real_type ,

  designtwo_take_card_value  ,

  designtwo_push_value  ,

  designtwo_selling_value  ,

  designtwo_take_card_per  ,

  designtwo_create_per estimate_this_per,
  designtwo_all_per  ,
  designtwo_irr  ,
  designtwo_payback
  FROM
  fp_designtwo_code_index fdci
    INNER JOIN
  (SELECT id from fp_plan_node where plan_id=#{plan_id}
  AND node_level=3 AND is_del=0
  ORDER BY create_time  DESC LIMIT 0,1
  ) realtype
  ON realtype.id=fdci.plan_node_id

   </select>

  <!-- 初始化首开前7天数据，首开审批表数据-->
   <update id="insertSevenDayIndex" parameterType="java.util.Map">

INSERT INTO fp_seven_day_index (
  id,
  plan_id,
    plan_node_id,
  product_type_code,
  invest_open_node,
  invest_product_type,
  invest_take_card_value,
  invest_push_value,
  invest_selling_value,

  invest_take_card_per,
  invest_this_per,
  invest_all_per,
  invest_irr,
  invest_payback,

  rules_open_node,
  rules_product_type,
  rules_take_card_value,
  rules_push_value,
  rules_selling_value,

  rules_take_card_per,
  rules_this_per,
  rules_all_per,
  rules_irr,
  rules_payback,

  designtwo_open_node,
  designtwo_product_type,
  designtwo_take_card_value,
  designtwo_push_value,
  designtwo_selling_value,

  designtwo_take_card_per,
  designtwo_this_per,
 designtwo_all_per,
  designtwo_irr,
  designtwo_payback
)
SELECT
UUID() AS id,

  plan_id,
#{plan_node_id} AS plan_node_id,

  product_type_code,


  invest_time invest_open_node,
  invest_real_type invest_product_type,

  invest_take_card_value,
  invest_push_value,
  invest_selling_value,
	invest_take_card_per,
  invest_create_per invest_this_per,
  invest_all_per,
  invest_irr,
  invest_payback,



  rules_time rules_open_node,
  rules_real_type rules_product_type,

  rules_take_card_value,
  rules_push_value,
  rules_selling_value,
 rules_take_card_per ,
  rules_create_per  rules_this_per,
  rules_all_per,
  rules_irr,
  rules_payback,



  designtwo_time ,
  designtwo_real_type ,

  designtwo_take_card_value  ,

  designtwo_push_value  ,

  designtwo_selling_value  ,

  designtwo_take_card_per  ,

  designtwo_create_per estimate_this_per,
  designtwo_all_per  ,
  designtwo_irr  ,
  designtwo_payback
  FROM
  fp_designtwo_code_index fdci
  INNER JOIN
  (SELECT id from fp_plan_node where plan_id=#{plan_id}
  AND node_level=3   AND is_effective=0
  ORDER BY create_time  DESC LIMIT 0,1
  ) realtype
  ON realtype.id=fdci.plan_node_id



   </update>

  <!-- 初始化首开前7天数据，首开审批表数据,发起新版本适用-->
  <update id="insertSevenDayIndexNew" parameterType="java.util.Map">
 INSERT INTO saleman.fp_seven_day_index (
        id,
        plan_id,
        plan_node_id,
        product_type_code,
        invest_open_node,
        invest_product_type,
        invest_take_card_value,
        invest_push_value,
        invest_selling_value,
        invest_avg_price,
        invest_operation_price,
        invest_take_card_per,
        invest_this_per,
        invest_all_per,
        invest_irr,
        invest_payback,
        rules_open_node,
        rules_product_type,
        rules_take_card_value,
        rules_push_value,
        rules_selling_value,
        rules_avg_price,
        rules_operation_price,
        rules_take_card_per,
        rules_this_per,
        rules_all_per,
        rules_irr,
        rules_payback,
        designtwo_open_node,
        designtwo_product_type,
        designtwo_take_card_value,
        designtwo_push_value,
        designtwo_selling_value,
        designtwo_avg_price,
        designtwo_operation_price,
        designtwo_take_card_per,
        designtwo_this_per,
        designtwo_all_per,
        designtwo_irr,
        designtwo_payback,
        estimate_open_node,
        estimate_product_type,
        estimate_take_card_value,
        estimate_push_value,
        estimate_selling_value,
        estimate_avg_price,
        estimate_operation_price,
        estimate_take_card_per,
        estimate_this_per,
        estimate_all_per,
        estimate_irr,
        estimate_payback,
        deviation_open_node,
        deviation_product_type,
        deviation_take_card_value,
        deviation_push_value,
        deviation_selling_value,
        deviation_avg_price,
        deviation_operation_price,
        deviation_take_card_per,
        deviation_this_per,
        deviation_all_per,
        deviation_irr,
        deviation_payback,
        deviationper_open_node,
        deviationper_product_type,
        deviationper_take_card_value,
        deviationper_push_value,
        deviationper_selling_value,
        deviationper_avg_price,
        deviationper_operation_price,
        deviationper_take_card_per,
        deviationper_this_per,
        deviationper_all_per,
        deviationper_irr,
        deviationper_payback,
        cause_open_node,
        cause_product_type,
        cause_take_card_value,
        cause_push_value,
        cause_selling_value,
        cause_avg_price,
        cause_operation_price,
        cause_take_card_per,
        cause_this_per,
        cause_all_per,
        cause_irr,
        cause_payback,
        competing_relation,
        competing_product,
        plate_dynamic,
        competing_condition,
        repot_customer_target,
        repot_customer_actual,
        repot_customer_per,
        come_way,
        come_customer_target,
        come_customer_actual,
        come_customer_per,
        lesser_way,
        lesser_customer_target,
        lesser_customer_actual,
        lesser_customer_per,
        big_way,
        big_customer_target,
        big_customer_actual,
        big_customer_per,
        sub_customer_target,
        sub_customer_actual,
        sub_customer_per,
        this_customer_visit,
        this_customer_conversionper,
        customer_cause,
        trader_open_prediction
        )
        VALUES
        (
        UUID() AS id,
        #{plan_id},
        #{plan_node_id},
        #{product_type_code},
        #{invest_open_node},
        #{invest_product_type},
        #{invest_take_card_value},
        #{invest_push_value},
        #{invest_selling_value},
        #{invest_avg_price},
        #{invest_operation_price},
        #{invest_take_card_per},
        #{invest_this_per},
        #{invest_all_per},
        #{invest_irr},
        #{invest_payback},
        #{rules_open_node},
        #{rules_product_type},
        #{rules_take_card_value},
        #{rules_push_value},
        #{rules_selling_value},
        #{rules_avg_price},
        #{rules_operation_price},
        #{rules_take_card_per},
        #{rules_this_per},
        #{rules_all_per},
        #{rules_irr},
        #{rules_payback},
        #{designtwo_open_node},
        #{designtwo_product_type},
        #{designtwo_take_card_value},
        #{designtwo_push_value},
        #{designtwo_selling_value},
        #{designtwo_avg_price},
        #{designtwo_operation_price},
        #{designtwo_take_card_per},
        #{designtwo_this_per},
        #{designtwo_all_per},
        #{designtwo_irr},
        #{designtwo_payback},
        #{estimate_open_node},
        #{estimate_product_type},
        #{estimate_take_card_value},
        #{estimate_push_value},
        #{estimate_selling_value},
        #{estimate_avg_price},
        #{estimate_operation_price},
        #{estimate_take_card_per},
        #{estimate_this_per},
        #{estimate_all_per},
        #{estimate_irr},
        #{estimate_payback},
        #{deviation_open_node},
        #{deviation_product_type},
        #{deviation_take_card_value},
        #{deviation_push_value},
        #{deviation_selling_value},
        #{deviation_avg_price},
        #{deviation_operation_price},
        #{deviation_take_card_per},
        #{deviation_this_per},
        #{deviation_all_per},
        #{deviation_irr},
        #{deviation_payback},
        #{deviationper_open_node},
        #{deviationper_product_type},
        #{deviationper_take_card_value},
        #{deviationper_push_value},
        #{deviationper_selling_value},
        #{deviationper_avg_price},
        #{deviationper_operation_price},
        #{deviationper_take_card_per},
        #{deviationper_this_per},
        #{deviationper_all_per},
        #{deviationper_irr},
        #{deviationper_payback},
        #{cause_open_node},
        #{cause_product_type},
        #{cause_take_card_value},
        #{cause_push_value},
        #{cause_selling_value},
        #{cause_avg_price},
        #{cause_operation_price},
        #{cause_take_card_per},
        #{cause_this_per},
        #{cause_all_per},
        #{cause_irr},
        #{cause_payback},
        #{competing_relation},
        #{competing_product},
        #{plate_dynamic},
        #{competing_condition},
        #{repot_customer_target},
        #{repot_customer_actual},
        #{repot_customer_per},
        #{come_way},
        #{come_customer_target},
        #{come_customer_actual},
        #{come_customer_per},
        #{lesser_way},
        #{lesser_customer_target},
        #{lesser_customer_actual},
        #{lesser_customer_per},
        #{big_way},
        #{big_customer_target},
        #{big_customer_actual},
        #{big_customer_per},
        #{sub_customer_target},
        #{sub_customer_actual},
        #{sub_customer_per},
        #{this_customer_visit},
        #{this_customer_conversionper},
        #{customer_cause},
        #{trader_open_prediction}
        ) ;

   </update>

  <!--跟新首开前7天数据，首开审批表数据-->
  <update id="updateSevenDayIndex"  parameterType="java.util.Map">
UPDATE
  fp_seven_day_index
SET
plan_node_id=#{plan_node_id},
  invest_open_node = #{invest_open_node},
  invest_product_type = #{invest_product_type},
  invest_take_card_value = #{invest_take_card_value},
  invest_push_value = #{invest_push_value},
  invest_selling_value = #{invest_selling_value},
  invest_avg_price = #{invest_avg_price},
  invest_operation_price = #{invest_operation_price},
  invest_take_card_per = #{invest_take_card_per},
  invest_this_per = #{invest_this_per},
  invest_all_per = #{invest_all_per},
  invest_irr = #{invest_irr},
  invest_payback = #{invest_payback},
  rules_open_node = #{rules_open_node},
  rules_product_type = #{rules_product_type},
  rules_take_card_value = #{rules_take_card_value},
  rules_push_value = #{rules_push_value},
  rules_selling_value = #{rules_selling_value},
  rules_avg_price = #{rules_avg_price},
  rules_operation_price = #{rules_operation_price},
  rules_take_card_per = #{rules_take_card_per},
  rules_this_per = #{rules_this_per},
  rules_all_per = #{rules_all_per},
  rules_irr = #{rules_irr},
  rules_payback = #{rules_payback},
  designtwo_open_node = #{designtwo_open_node},
  designtwo_product_type = #{designtwo_product_type},
  designtwo_take_card_value = #{designtwo_take_card_value},
  designtwo_push_value = #{designtwo_push_value},
  designtwo_selling_value = #{designtwo_selling_value},
  designtwo_avg_price = #{designtwo_avg_price},
  designtwo_operation_price = #{designtwo_operation_price},
  designtwo_take_card_per = #{designtwo_take_card_per},
  designtwo_this_per = #{designtwo_this_per},
  designtwo_all_per = #{designtwo_all_per},
  designtwo_irr = #{designtwo_irr},
  designtwo_payback = #{designtwo_payback},
  estimate_open_node = #{estimate_open_node},
  estimate_product_type = #{estimate_product_type},
  estimate_take_card_value = #{estimate_take_card_value},
  estimate_push_value = #{estimate_push_value},
  estimate_selling_value = #{estimate_selling_value},
  estimate_avg_price = #{estimate_avg_price},
  estimate_operation_price = #{estimate_operation_price},
  estimate_take_card_per = #{estimate_take_card_per},
  estimate_this_per = #{estimate_this_per},
  estimate_all_per = #{estimate_all_per},
  estimate_irr = #{estimate_irr},
  estimate_payback = #{estimate_payback},
  deviation_open_node = #{deviation_open_node},
  deviation_product_type = #{deviation_product_type},
  deviation_take_card_value = #{deviation_take_card_value},
  deviation_push_value = #{deviation_push_value},
  deviation_selling_value = #{deviation_selling_value},
  deviation_avg_price = #{deviation_avg_price},
  deviation_operation_price = #{deviation_operation_price},
  deviation_take_card_per = #{deviation_take_card_per},
  deviation_this_per = #{deviation_this_per},
  deviation_all_per = #{deviation_all_per},
  deviation_irr = #{deviation_irr},
  deviation_payback = #{deviation_payback},
  deviationper_open_node = #{deviationper_open_node},
  deviationper_product_type = #{deviationper_product_type},
  deviationper_take_card_value = #{deviationper_take_card_value},
  deviationper_push_value = #{deviationper_push_value},
  deviationper_selling_value = #{deviationper_selling_value},
  deviationper_avg_price = #{deviationper_avg_price},
  deviationper_operation_price = #{deviationper_operation_price},
  deviationper_take_card_per = #{deviationper_take_card_per},
  deviationper_this_per = #{deviationper_this_per},
  deviationper_all_per = #{deviationper_all_per},
  deviationper_irr = #{deviationper_irr},
  deviationper_payback = #{deviationper_payback},
  cause_open_node = #{cause_open_node},
  cause_product_type = #{cause_product_type},
  cause_take_card_value = #{cause_take_card_value},
  cause_push_value = #{cause_push_value},
  cause_selling_value = #{cause_selling_value},
  cause_avg_price = #{cause_avg_price},
  cause_operation_price = #{cause_operation_price},
  cause_take_card_per = #{cause_take_card_per},
  cause_this_per = #{cause_this_per},
  cause_all_per = #{cause_all_per},
  cause_irr = #{cause_irr},
  cause_payback = #{cause_payback},
  competing_relation = #{competing_relation},
  competing_product = #{competing_product},
  plate_dynamic = #{plate_dynamic},
  competing_condition = #{competing_condition},
  repot_customer_target = #{repot_customer_target},
  repot_customer_actual = #{repot_customer_actual},
  repot_customer_per = #{repot_customer_per},
  come_way = #{come_way},
  come_customer_target = #{come_customer_target},
  come_customer_actual = #{come_customer_actual},
  come_customer_per = #{come_customer_per},
  lesser_way = #{lesser_way},
  lesser_customer_target = #{lesser_customer_target},
  lesser_customer_actual = #{lesser_customer_actual},
  lesser_customer_per = #{lesser_customer_per},
  big_way = #{big_way},
  big_customer_target = #{big_customer_target},
  big_customer_actual = #{big_customer_actual},
  big_customer_per = #{big_customer_per},
  sub_customer_target = #{sub_customer_target},
  sub_customer_actual = #{sub_customer_actual},
  sub_customer_per = #{sub_customer_per},
  this_customer_visit = #{this_customer_visit},
  this_customer_conversionper = #{this_customer_conversionper},
  customer_cause = #{customer_cause},
  trader_open_prediction = #{trader_open_prediction}
WHERE id = #{id}

  </update>



    <!--初始化7天开盘的竞品情况-->
 <update id="insertSevenCompet" parameterType="arraylist">

INSERT INTO fp_seven_day_compet (
  id,
  plan_id,
  plan_node_id,
  compet_project,
  open_time,
  sell_price,
  this_month_flas_avg,
  sell_operation_avg
)
VALUES
     <foreach collection="list" index="index" separator="," item="item">
  (
    UUID(),
    #{item.plan_id},
    #{item.plan_node_id},
    #{item.compet_project},
    #{item.open_time},
    #{item.sell_price},
    #{item.this_month_flas_avg},
    #{item.sell_operation_avg}
  )
     </foreach>
 </update>

    <!--更新7天开盘的竞品情况-->
<update id="updateSevenCompet" parameterType="java.util.Map">
UPDATE
  fp_seven_day_compet
SET
    plan_node_id=#{plan_node_id},
  compet_project = #{compet_project},
  open_time = #{open_time},
  sell_price = #{sell_price},
  this_month_flas_avg = #{this_month_flas_avg},
  sell_operation_avg = #{sell_operation_avg}
WHERE id = #{id}
</update>

    <!--搜索7天开盘的竞品情况-->
 <select id="selectSevenCompet" parameterType="java.util.Map"  resultType="java.util.Map">

SELECT
  id,
  plan_id,
  plan_node_id,
  compet_project,
 DATE_FORMAT(open_time,'%Y-%m-%d')  open_time,
  sell_price,
  this_month_flas_avg,
  sell_operation_avg
FROM
  fp_seven_day_compet
where
plan_node_id=#{plan_node_id}
 </select>

    <!--搜索可以初始化的首开前7天里面的首开均价，来自别的表-->
<select id="selectNewSevenPrice" parameterType="java.util.Map"  resultType="java.util.Map">
    SELECT
UUID() AS id,
plan_id,
  product_type_code,
  product_type,
  invest_open_avg_price invest_avg,
  rules_open_avg_price rules_avg,
  designtwo_open_avg_price designtwo_avg
FROM
fp_designtwo_code_index_price fdcip
  LEFT JOIN
  (SELECT id from fp_plan_node where plan_id=#{plan_id}
  AND node_level=3 AND is_del=0
  ORDER BY create_time  DESC LIMIT 0,1
  ) realtype
  ON realtype.id=fdcip.plan_node_id
</select>

  <!--初始化首开前7天里面的首开均价-->
<insert id="insertSevenPrice"  parameterType="java.util.Map" >
  INSERT INTO fp_seven_day_open_avg(
  id,
  plan_id,
plan_node_id,
  product_type_code,
  product_type,
  invest_avg,
  rules_avg,
  designtwo_avg

)
   SELECT
UUID() AS id,
plan_id,
#{plan_node_id} AS plan_node_id,
  product_type_code,
  product_type,
  invest_open_avg_price invest_avg,
  rules_open_avg_price rules_avg,
  designtwo_open_avg_price designtwo_avg
FROM
fp_designtwo_code_index_price fdcip
  INNER JOIN
  (SELECT id from fp_plan_node where plan_id=#{plan_id}
  AND node_level=3 AND is_effective=0
  ORDER BY create_time  DESC LIMIT 0,1
  ) realtype
  ON realtype.id=fdcip.plan_node_id

</insert>

  <!--初始化首开前7天里面的首开均价，前端传值-->
  <insert id="insertSevenPriceNew"  parameterType="arraylist" >
  INSERT INTO fp_seven_day_open_avg (
  id,
  plan_id,
  plan_node_id,
  product_type_code,
  product_type,
  invest_avg,
  rules_avg,
  designtwo_avg,
  open_estimate,
  bias_price,
  bias_per,
  bias_cause
)
VALUES
    <foreach collection="list" index="index" separator="," item="item">
  (
  UUID() AS id,
          #{item.plan_id},
      #{item.plan_node_id},
      #{item.product_type_code},
      #{item.product_type},
      #{item.invest_avg},
      #{item.rules_avg},
      #{item.designtwo_avg},
      #{item.open_estimate},
      #{item.bias_price},
      #{item.bias_per},
      #{item.bias_cause}
  )
    </foreach>


</insert>

  <!--搜索首开前7天里面的首开均价-->
 <select id="selectSevenPrice" parameterType="java.util.Map"  resultType="java.util.Map">
SELECT
  id,
  plan_id,
  plan_node_id,
  product_type_code,
  product_type,
  invest_avg,
  rules_avg,
  designtwo_avg,
  open_estimate,
  bias_price,
  bias_per,
  bias_cause

FROM
  fp_seven_day_open_avg
   WHERE
  plan_node_id=#{plan_node_id}
 </select>

  <!--更新首开前7天里面的首开均价-->
  <update id="updateSevenPrice" parameterType="java.util.Map" >

UPDATE
  fp_seven_day_open_avg
SET
plan_node_id=#{plan_node_id},
  invest_avg = #{invest_avg},
  rules_avg = #{rules_avg},
  designtwo_avg = #{designtwo_avg},
  open_estimate = #{open_estimate},
  bias_price = #{bias_price},
  bias_per = #{bias_per},
  bias_cause = #{bias_cause}
WHERE id = #{id}

  </update>



  <!--搜索首开前7天里面的首开均价的比值-->
<select id="selectSevenPriceAvg" parameterType="java.util.Map"  resultType="java.util.Map">
          SELECT
 ROUND ( AVG.invest_avg/sumavg.invest_avg*10,0)  investcompare,
  ROUND ( AVG.rules_avg/sumavg.rules_avg*10,0)  rulescompare,
   ROUND ( AVG.designtwo_avg/sumavg.designtwo_avg*10,0)  designtwocompare

    FROM
    fp_seven_day_open_avg AVG
    INNER JOIN
    (SELECT
	plan_node_id,
	SUM(invest_avg)invest_avg,
	SUM(rules_avg) rules_avg,
	SUM(designtwo_avg) designtwo_avg
	FROM
	fp_seven_day_open_avg
	 WHERE
	plan_node_id=#{plan_node_id}
	) sumavg
	ON
	sumavg.plan_node_id=AVG.plan_node_id

    WHERE
  AVG.plan_node_id=#{plan_node_id}
	AND
	AVG.product_type=#{product_type}



</select>
<!--删除前7天里面的首开均价，用于特殊逻辑-->
  <update id="deleteSevenPriceAvg" parameterType="java.util.Map" >
      DELETE  FROM
      fp_seven_day_open_avg
      WHERE
      plan_node_id=#{plan_node_id}
  </update>


  <!--搜索首开前7天里面的首开均价的产品类型-->
 <select id="selectSevenType" parameterType="java.util.Map"  resultType="java.lang.String">
     SELECT
   product_type
    FROM
    fp_seven_day_open_avg
     WHERE
  plan_node_id=#{plan_node_id}
  GROUP BY
  product_type

 </select>

<!--初始化前三月，前两个月等节点储客计划
要的参数:plan_id  plan_node_id project_id
-->
    <!--该SQL是查出顶设2最新版本且已审核通过的SQL-->
  <sql id="designTwoID" >
       LEFT JOIN
(
  SELECT
  fpn.id
  FROM
  fp_plan_node fpn
  INNER JOIN
  (SELECT id, VERSION FROM fp_plan_node
    WHERE fp_plan_node.node_level=3  AND plan_id=#{plan_id} ORDER BY  create_time DESC LIMIT 0,1
  ) ct
  ON 	fpn.id=ct.id
  WHERE fpn.plan_id=#{plan_id}

  AND
  is_del=0
    AND
    plan_approval= 4
) pni

  </sql>


<!--初始化节点储客计划-->
<insert id="insertNewStorage" parameterType="java.util.Map" >
INSERT INTO fp_guest_storage_node_plan (
  id,
  plan_id,
  plan_node_id,
  nide_name,
  node_time,
  report_num,
  visit_num,
  little_num,
  little_per,
  big_num,
  big_per,
  sub_num,
  make_per,
  level,
  line_name,

 node_level,

    create_time,
    little_way,
    flow_id,
    big_way


)
select * from(
  SELECT
    UUID() AS id,
    #{plan_id} AS plan_id,
    #{plan_node_id} AS plan_node_id,
       '首开前3个月'   AS nide_name,
     fdn.open_time AS node_time,
  SUM(reportCnt) report_num,
  SUM(visitCnt) visit_num,
  SUM(lesser_card) little_num,
  ROUND(SUM(lesser_card)/CASE WHEN SUM(visitCnt)=0 THEN NULL  ELSE SUM(visitCnt) END*100,0) little_per,
  SUM(big_card) big_num,
  ROUND(SUM(big_card)/CASE WHEN SUM(lesser_card)=0 THEN NULL  ELSE SUM(lesser_card) END*100,0) big_per,
  SUM(subscribe_num) sub_num,
  ROUND(SUM(subscribe_num)/CASE WHEN SUM(visitCnt)=0 THEN NULL  ELSE SUM(visitCnt) END*100,0) make_per,
   2 AS level,
    '实际' AS line_name,
    4 AS node_level,
      MAX(fcgs.create_time) create_time,
      NULL AS little_way,
       #{flow_id} AS flow_id,
       NULL AS big_way

  FROM
  fp_comm_guest_storage fcgs
  LEFT JOIN
  (SELECT
  DATE_SUB(open_time,INTERVAL 90 DAY) open_time,project_id
  FROM
    fp_plan fp
    WHERE id=#{plan_id}
  ) fdn
    ON fdn.project_id=fcgs.project_id
  WHERE
  fcgs.total_time &lt;= fdn.open_time
and
    fcgs.project_id in (SELECT fpr.project_id FROM  fp_project_relationship fpr,
    (SELECT ID FROM fp_project_relationship where project_id=(select project_id from fp_plan where id=#{plan_id})  ) PID
    WHERE
    (fpr.id=PID.ID OR  fpr.pid=PID.ID ))
  UNION ALL

  SELECT
    UUID() AS id,
    #{plan_id} AS plan_id,
    #{plan_node_id} AS plan_node_id,
       '首开前2个月'   AS nide_name,
     fdn.open_time AS node_time,
  SUM(reportCnt) report_num,
  SUM(visitCnt) visit_num,
  SUM(lesser_card) little_num,
  ROUND(SUM(lesser_card)/CASE WHEN SUM(visitCnt)=0 THEN NULL ELSE SUM(visitCnt)  END*100,0) little_per,
  SUM(big_card) big_num,
  ROUND(SUM(big_card)/CASE WHEN SUM(lesser_card)=0 THEN NULL ELSE SUM(lesser_card)  END*100,0) big_per,
  SUM(subscribe_num) sub_num,
  ROUND(SUM(subscribe_num)/CASE WHEN SUM(visitCnt)=0 THEN NULL ELSE SUM(visitCnt)  END*100,0) make_per,
   2 AS level,
    '实际' AS line_name,
    5 AS node_level,
      MAX(fcgs.create_time) create_time, NULL AS little_way,#{flow_id} AS flow_id,  NULL AS big_way
  FROM
  fp_comm_guest_storage fcgs
  LEFT JOIN
  (SELECT
  DATE_SUB(open_time,INTERVAL 60 DAY) open_time,project_id
  FROM
    fp_plan fp
    WHERE id=#{plan_id}
  ) fdn
    ON fdn.project_id=fcgs.project_id
    WHERE
    fcgs.total_time &lt;= fdn.open_time
    and
    fcgs.project_id in (SELECT fpr.project_id FROM  fp_project_relationship fpr,
    (SELECT ID FROM fp_project_relationship where project_id=(select project_id from fp_plan where id=#{plan_id})  ) PID
    WHERE
    (fpr.id=PID.ID OR  fpr.pid=PID.ID ))


  UNION ALL

 SELECT
    UUID() AS id,
    #{plan_id} AS plan_id,
    #{plan_node_id} AS plan_node_id,
      '首开前21天'   AS nide_name,
     fdn.open_time AS node_time,
  SUM(reportCnt) report_num,
  SUM(visitCnt) visit_num,
  SUM(lesser_card) little_num,
  ROUND(SUM(lesser_card)/CASE WHEN SUM(visitCnt)=0 THEN NULL ELSE SUM(visitCnt) END*100,0) little_per,
  SUM(big_card) big_num,
  ROUND(SUM(big_card)/CASE WHEN SUM(lesser_card)=0 THEN NULL ELSE SUM(lesser_card) END*100,0) big_per,
  SUM(subscribe_num) sub_num,
   ROUND(SUM(subscribe_num)/CASE WHEN SUM(visitCnt)=0 THEN NULL ELSE SUM(visitCnt) END*100,0) make_per,
   2 AS level,
   '实际' AS line_name,
   6 AS node_level,
      MAX(fcgs.create_time) create_time, NULL AS little_way,#{flow_id} AS flow_id,  NULL AS big_way
  FROM
  fp_comm_guest_storage fcgs
  LEFT JOIN
  (SELECT
  DATE_SUB(open_time,INTERVAL 21 DAY) open_time,project_id
  FROM
    fp_plan fp
    WHERE id=#{plan_id}
  ) fdn
    ON fdn.project_id=fcgs.project_id
    WHERE
    fcgs.total_time &lt;= fdn.open_time
    and
    fcgs.project_id in (SELECT fpr.project_id FROM  fp_project_relationship fpr,
    (SELECT ID FROM fp_project_relationship where project_id=(select project_id from fp_plan where id=#{plan_id})  ) PID
    WHERE
    (fpr.id=PID.ID OR  fpr.pid=PID.ID ))
  UNION ALL

 SELECT
    UUID() AS id,
    #{plan_id} AS plan_id,
    #{plan_node_id} AS plan_node_id,
       '首开前7天'   AS nide_name,
     fdn.open_time AS node_time,
  SUM(reportCnt) report_num,
  SUM(visitCnt) visit_num,
  SUM(lesser_card) little_num,
  ROUND(SUM(lesser_card)/CASE WHEN SUM(visitCnt)=0 THEN NULL ELSE SUM(visitCnt) END*100,0) little_per,
  SUM(big_card) big_num,
  ROUND(SUM(big_card)/CASE WHEN SUM(lesser_card)=0 THEN NULL ELSE SUM(lesser_card) END*100,0) big_per,
  SUM(subscribe_num) sub_num,
    ROUND(SUM(subscribe_num)/CASE WHEN SUM(visitCnt)=0 THEN NULL ELSE SUM(visitCnt) END*100,0) make_per,
   2 AS level,
    '实际' AS line_name,
    7 AS node_level,
      MAX(fcgs.create_time) create_time, NULL AS little_way, #{flow_id} AS flow_id, NULL AS big_way
  FROM
  fp_comm_guest_storage fcgs
  LEFT JOIN
  (SELECT
  DATE_SUB(open_time,INTERVAL 7 DAY) open_time,project_id
  FROM
    fp_plan fp
    WHERE id=#{plan_id}
  ) fdn
    ON fdn.project_id=fcgs.project_id
    WHERE
    fcgs.total_time &lt;= fdn.open_time
    and
    fcgs.project_id in (SELECT fpr.project_id FROM  fp_project_relationship fpr,
    (SELECT ID FROM fp_project_relationship where project_id=(select project_id from fp_plan where id=#{plan_id})  ) PID
    WHERE
    (fpr.id=PID.ID OR  fpr.pid=PID.ID ))

  UNION ALL

  SELECT
    UUID() AS id,
    #{plan_id} AS plan_id,
    #{plan_node_id} AS plan_node_id,
     '首开'   AS nide_name,
     fdn.open_time AS node_time,
  SUM(reportCnt) report_num,
  SUM(visitCnt) visit_num,
  SUM(lesser_card) little_num,
  ROUND(SUM(lesser_card)/CASE WHEN SUM(visitCnt)=0 THEN NULL ELSE SUM(visitCnt) END*100,0) little_per,
  SUM(big_card) big_num,
  ROUND(SUM(big_card)/CASE WHEN SUM(lesser_card)=0 THEN NULL ELSE SUM(lesser_card) END*100,0) big_per,
  SUM(subscribe_num) sub_num,
  ROUND(SUM(subscribe_num)/CASE WHEN SUM(visitCnt)=0 THEN NULL ELSE SUM(visitCnt) END*100,0) make_per,
   2 AS level,
    '实际' AS line_name,
    8 AS node_level,
      MAX(fcgs.create_time) create_time, NULL AS little_way, #{flow_id} AS flow_id, NULL AS big_way
  FROM
  fp_comm_guest_storage fcgs
  LEFT JOIN
  (SELECT
  open_time
   open_time,project_id
  FROM
    fp_plan fp
    WHERE id=#{plan_id}
  ) fdn
    ON fdn.project_id=fcgs.project_id
    WHERE
    fcgs.total_time &lt;= fdn.open_time
    and
    fcgs.project_id in (SELECT fpr.project_id FROM  fp_project_relationship fpr,
    (SELECT ID FROM fp_project_relationship where project_id=(select project_id from fp_plan where id=#{plan_id})  ) PID
    WHERE
    (fpr.id=PID.ID OR  fpr.pid=PID.ID ))
    <if test='flow_id==null or flow_id==""'>
            UNION ALL
            SELECT
  UUID() AS id,
  plan_id,
    #{plan_node_id} AS plan_node_id,
  nide_name,
  node_time,
  report_num,
  visit_num,
  little_num,
  little_per,
  big_num,
  big_per,
  sub_num,
  make_per,
  level,
  line_name,

  node_level,
  NOW() create_time,
  little_way,
  #{flow_id} AS flow_id,
  big_way
FROM
fp_guest_storage_node_plan fgsnp

INNER  JOIN
(
 select id from fp_guest_storage_flow
            WHERE plan_id=#{plan_id}
            and node_level=#{node_level}-1 and version=(SELECT version from fp_guest_storage_flow where
            plan_id=#{plan_id}
            and node_level=#{node_level}-1 and approval_stuat=4 ORDER BY create_time DESC LIMIT 1)
           AND approval_stuat=4  LIMIT 1
) pni
ON pni.id=fgsnp.flow_id


AND level=1
    </if>  )  a ;
INSERT INTO fp_guest_storage_node_plan (
  id,
  plan_id,
 plan_node_id,
  nide_name,
  node_time,
  report_num,
  visit_num,
  little_num,

  big_num,

  sub_num,

  level,
  line_name,
  node_level,
  flow_id
)
SELECT
  UUID() AS id,
  LEVEL1.plan_id,
   #{plan_node_id} AS plan_node_id,
   LEVEL1.nide_name,
  LEVEL1.node_time,
  ROUND((LEVEL1.report_num- LEVEL2.report_num)/(CASE WHEN LEVEL1.report_num=0  THEN NULL ELSE LEVEL1.report_num END)*100,0)    report_num,
    ROUND((LEVEL1.visit_num- LEVEL2.visit_num)/(CASE WHEN LEVEL1.visit_num=0  THEN NULL ELSE LEVEL1.visit_num END)*100,0)  visit_num,
    ROUND((LEVEL1.little_num- LEVEL2.little_num)/(CASE WHEN LEVEL1.little_num=0  THEN NULL ELSE LEVEL1.little_num END)*100,0) little_num,

   ROUND((LEVEL1.big_num- LEVEL2.big_num)/(CASE WHEN LEVEL1.big_num=0 THEN NULL ELSE LEVEL1.big_num END)*100,0)  big_num,

ROUND((LEVEL1.sub_num- LEVEL2.sub_num)/(CASE WHEN LEVEL1.sub_num=0 THEN NULL ELSE LEVEL1.sub_num END)*100,0)   sub_num,

  3 AS level,
  '偏差率%' AS line_name,
   LEVEL1.node_level,
   #{flow_id} AS flow_id
FROM
fp_guest_storage_node_plan LEVEL1
LEFT JOIN
(
SELECT *FROM
fp_guest_storage_node_plan
WHERE LEVEL=2) LEVEL2
ON LEVEL1.plan_node_id=LEVEL2.plan_node_id AND LEVEL1.node_time=LEVEL2.node_time
AND   LEVEL1.nide_name=LEVEL2.nide_name
<if test="flow_id!=null and flow_id!=''">
    AND   LEVEL1.flow_id=LEVEL2.flow_id
</if>
WHERE
LEVEL1.LEVEL=1

    <if test="flow_id!=null and flow_id!=''">
        AND   LEVEL1.flow_id=#{flow_id}
    </if>
    AND
LEVEL1.plan_node_id
=#{plan_node_id};



</insert>


    <!--初始化节点储客计划-->
    <insert id="insertNewStorageFake" parameterType="java.util.Map" >
        INSERT INTO fp_guest_storage_node_plan (
        id,
        plan_id,
        plan_node_id,
        nide_name,
        node_time,
        report_num,
        visit_num,
        little_num,
        little_per,
        big_num,
        big_per,
        sub_num,
        make_per,
        level,
        line_name,

        node_level,

        create_time,
        little_way,
        flow_id,
        big_way


        )
        select * from(
        SELECT
        UUID() AS id,
        #{plan_id} AS plan_id,
        #{plan_node_id} AS plan_node_id,
        '首开前3个月'   AS nide_name,
        fdn.open_time AS node_time,
        SUM(reportCnt) report_num,
        SUM(visitCnt) visit_num,
        SUM(lesser_card) little_num,
        ROUND(SUM(lesser_card)/CASE WHEN SUM(visitCnt)=0 THEN NULL  ELSE SUM(visitCnt) END*100,0) little_per,
        SUM(big_card) big_num,
        ROUND(SUM(big_card)/CASE WHEN SUM(lesser_card)=0 THEN NULL  ELSE SUM(lesser_card) END*100,0) big_per,
        SUM(subscribe_num) sub_num,
        ROUND(SUM(subscribe_num)/CASE WHEN SUM(visitCnt)=0 THEN NULL  ELSE SUM(visitCnt) END*100,0) make_per,
        2 AS level,
        '实际' AS line_name,
        4 AS node_level,
        MAX(fcgs.create_time) create_time,
        NULL AS little_way,
        #{flow_id} AS flow_id,
        NULL AS big_way

        FROM
        fp_comm_guest_storage fcgs
        LEFT JOIN
        (SELECT
        DATE_SUB(open_time,INTERVAL 90 DAY) open_time,project_id
        FROM
        fp_plan fp
        WHERE id=#{plan_id}
        ) fdn
        ON 1=1
        WHERE
        fcgs.total_time &lt;= fdn.open_time
        and
        fcgs.project_id in (SELECT fpr.project_id FROM  fp_project_relationship fpr,
        (SELECT ID FROM fp_project_relationship where project_id=(select project_id from fp_plan where id=#{plan_id})  ) PID
        WHERE
        (fpr.id=PID.ID OR  fpr.pid=PID.ID ))
        UNION ALL

        SELECT
        UUID() AS id,
        #{plan_id} AS plan_id,
        #{plan_node_id} AS plan_node_id,
        '首开前2个月'   AS nide_name,
        fdn.open_time AS node_time,
        SUM(reportCnt) report_num,
        SUM(visitCnt) visit_num,
        SUM(lesser_card) little_num,
        ROUND(SUM(lesser_card)/CASE WHEN SUM(visitCnt)=0 THEN NULL ELSE SUM(visitCnt)  END*100,0) little_per,
        SUM(big_card) big_num,
        ROUND(SUM(big_card)/CASE WHEN SUM(lesser_card)=0 THEN NULL ELSE SUM(lesser_card)  END*100,0) big_per,
        SUM(subscribe_num) sub_num,
        ROUND(SUM(subscribe_num)/CASE WHEN SUM(visitCnt)=0 THEN NULL ELSE SUM(visitCnt)  END*100,0) make_per,
        2 AS level,
        '实际' AS line_name,
        5 AS node_level,
        MAX(fcgs.create_time) create_time, NULL AS little_way,#{flow_id} AS flow_id,  NULL AS big_way
        FROM
        fp_comm_guest_storage fcgs
        LEFT JOIN
        (SELECT
        DATE_SUB(open_time,INTERVAL 60 DAY) open_time,project_id
        FROM
        fp_plan fp
        WHERE id=#{plan_id}
        ) fdn
        ON 1=1
        WHERE
        fcgs.total_time &lt;= fdn.open_time
        and
        fcgs.project_id in (SELECT fpr.project_id FROM  fp_project_relationship fpr,
        (SELECT ID FROM fp_project_relationship where project_id=(select project_id from fp_plan where id=#{plan_id})  ) PID
        WHERE
        (fpr.id=PID.ID OR  fpr.pid=PID.ID ))


        UNION ALL

        SELECT
        UUID() AS id,
        #{plan_id} AS plan_id,
        #{plan_node_id} AS plan_node_id,
        '首开前21天'   AS nide_name,
        fdn.open_time AS node_time,
        SUM(reportCnt) report_num,
        SUM(visitCnt) visit_num,
        SUM(lesser_card) little_num,
        ROUND(SUM(lesser_card)/CASE WHEN SUM(visitCnt)=0 THEN NULL ELSE SUM(visitCnt) END*100,0) little_per,
        SUM(big_card) big_num,
        ROUND(SUM(big_card)/CASE WHEN SUM(lesser_card)=0 THEN NULL ELSE SUM(lesser_card) END*100,0) big_per,
        SUM(subscribe_num) sub_num,
        ROUND(SUM(subscribe_num)/CASE WHEN SUM(visitCnt)=0 THEN NULL ELSE SUM(visitCnt) END*100,0) make_per,
        2 AS level,
        '实际' AS line_name,
        6 AS node_level,
        MAX(fcgs.create_time) create_time, NULL AS little_way,#{flow_id} AS flow_id,  NULL AS big_way
        FROM
        fp_comm_guest_storage fcgs
        LEFT JOIN
        (SELECT
        DATE_SUB(open_time,INTERVAL 21 DAY) open_time,project_id
        FROM
        fp_plan fp
        WHERE id=#{plan_id}
        ) fdn
        ON 1=1
        WHERE
        fcgs.total_time &lt;= fdn.open_time
        and
        fcgs.project_id in (SELECT fpr.project_id FROM  fp_project_relationship fpr,
        (SELECT ID FROM fp_project_relationship where project_id=(select project_id from fp_plan where id=#{plan_id})  ) PID
        WHERE
        (fpr.id=PID.ID OR  fpr.pid=PID.ID ))
        UNION ALL

        SELECT
        UUID() AS id,
        #{plan_id} AS plan_id,
        #{plan_node_id} AS plan_node_id,
        '首开前7天'   AS nide_name,
        fdn.open_time AS node_time,
        SUM(reportCnt) report_num,
        SUM(visitCnt) visit_num,
        SUM(lesser_card) little_num,
        ROUND(SUM(lesser_card)/CASE WHEN SUM(visitCnt)=0 THEN NULL ELSE SUM(visitCnt) END*100,0) little_per,
        SUM(big_card) big_num,
        ROUND(SUM(big_card)/CASE WHEN SUM(lesser_card)=0 THEN NULL ELSE SUM(lesser_card) END*100,0) big_per,
        SUM(subscribe_num) sub_num,
        ROUND(SUM(subscribe_num)/CASE WHEN SUM(visitCnt)=0 THEN NULL ELSE SUM(visitCnt) END*100,0) make_per,
        2 AS level,
        '实际' AS line_name,
        7 AS node_level,
        MAX(fcgs.create_time) create_time, NULL AS little_way, #{flow_id} AS flow_id, NULL AS big_way
        FROM
        fp_comm_guest_storage fcgs
        LEFT JOIN
        (SELECT
        DATE_SUB(open_time,INTERVAL 7 DAY) open_time,project_id
        FROM
        fp_plan fp
        WHERE id=#{plan_id}
        ) fdn
        ON 1=1
        WHERE
        fcgs.total_time &lt;= fdn.open_time
        and
        fcgs.project_id in (SELECT fpr.project_id FROM  fp_project_relationship fpr,
        (SELECT ID FROM fp_project_relationship where project_id=(select project_id from fp_plan where id=#{plan_id})  ) PID
        WHERE
        (fpr.id=PID.ID OR  fpr.pid=PID.ID ))

        UNION ALL

        SELECT
        UUID() AS id,
        #{plan_id} AS plan_id,
        #{plan_node_id} AS plan_node_id,
        '首开'   AS nide_name,
        fdn.open_time AS node_time,
        SUM(reportCnt) report_num,
        SUM(visitCnt) visit_num,
        SUM(lesser_card) little_num,
        ROUND(SUM(lesser_card)/CASE WHEN SUM(visitCnt)=0 THEN NULL ELSE SUM(visitCnt) END*100,0) little_per,
        SUM(big_card) big_num,
        ROUND(SUM(big_card)/CASE WHEN SUM(lesser_card)=0 THEN NULL ELSE SUM(lesser_card) END*100,0) big_per,
        SUM(subscribe_num) sub_num,
        ROUND(SUM(subscribe_num)/CASE WHEN SUM(visitCnt)=0 THEN NULL ELSE SUM(visitCnt) END*100,0) make_per,
        2 AS level,
        '实际' AS line_name,
        8 AS node_level,
        MAX(fcgs.create_time) create_time, NULL AS little_way, #{flow_id} AS flow_id, NULL AS big_way
        FROM
        fp_comm_guest_storage fcgs
        LEFT JOIN
        (SELECT
        open_time
        open_time,project_id
        FROM
        fp_plan fp
        WHERE id=#{plan_id}
        ) fdn
        ON 1=1
        WHERE
        fcgs.total_time &lt;= fdn.open_time
        and
        fcgs.project_id in (SELECT fpr.project_id FROM  fp_project_relationship fpr,
        (SELECT ID FROM fp_project_relationship where project_id=(select project_id from fp_plan where id=#{plan_id})  ) PID
        WHERE
        (fpr.id=PID.ID OR  fpr.pid=PID.ID ))

            UNION ALL
            SELECT
            UUID() AS id,
            plan_id,
            #{plan_node_id} AS plan_node_id,
            nide_name,
            node_time,
            report_num,
            visit_num,
            little_num,
            little_per,
            big_num,
            big_per,
            sub_num,
            make_per,
            level,
            line_name,

            node_level,
            NOW() create_time,
            little_way,
            #{flow_id} AS flow_id,
            big_way
            FROM
            fp_guest_storage_node_plan fgsnp

            INNER  JOIN
            (
        select * from  ( select id from fp_guest_storage_flow
            WHERE plan_id=#{plan_id}
            and node_level=4-1 and version=(SELECT version from fp_guest_storage_flow where
            plan_id=#{plan_id}
            and node_level=4-1 and approval_stuat=4 ORDER BY create_time DESC LIMIT 1)
           AND approval_stuat=4  LIMIT 1) a LIMIT 1
            ) pni
            ON pni.id=fgsnp.flow_id


            AND level=1
          )  a ;
        INSERT INTO fp_guest_storage_node_plan (
        id,
        plan_id,
        plan_node_id,
        nide_name,
        node_time,
        report_num,
        visit_num,
        little_num,

        big_num,

        sub_num,

        level,
        line_name,
        node_level,
        flow_id
        )
        SELECT
        UUID() AS id,
        LEVEL1.plan_id,
        #{plan_node_id} AS plan_node_id,
        LEVEL1.nide_name,
        LEVEL1.node_time,
        ROUND((LEVEL1.report_num- LEVEL2.report_num)/(CASE WHEN LEVEL1.report_num=0  THEN NULL ELSE LEVEL1.report_num END)*100,0)    report_num,
        ROUND((LEVEL1.visit_num- LEVEL2.visit_num)/(CASE WHEN LEVEL1.visit_num=0  THEN NULL ELSE LEVEL1.visit_num END)*100,0)  visit_num,
        ROUND((LEVEL1.little_num- LEVEL2.little_num)/(CASE WHEN LEVEL1.little_num=0  THEN NULL ELSE LEVEL1.little_num END)*100,0) little_num,

        ROUND((LEVEL1.big_num- LEVEL2.big_num)/(CASE WHEN LEVEL1.big_num=0 THEN NULL ELSE LEVEL1.big_num END)*100,0)  big_num,

        ROUND((LEVEL1.sub_num- LEVEL2.sub_num)/(CASE WHEN LEVEL1.sub_num=0 THEN NULL ELSE LEVEL1.sub_num END)*100,0)   sub_num,

        3 AS level,
        '偏差率%' AS line_name,
        LEVEL1.node_level,
        #{flow_id} AS flow_id
        FROM
        fp_guest_storage_node_plan LEVEL1
        LEFT JOIN
        (
        SELECT *FROM
        fp_guest_storage_node_plan
        WHERE LEVEL=2) LEVEL2
        ON LEVEL1.plan_node_id=LEVEL2.plan_node_id AND LEVEL1.node_time=LEVEL2.node_time
        AND   LEVEL1.nide_name=LEVEL2.nide_name

            AND   LEVEL1.flow_id=LEVEL2.flow_id

        WHERE
        LEVEL1.LEVEL=1


            AND   LEVEL1.flow_id=#{flow_id}

        AND
        LEVEL1.plan_node_id
        =#{plan_node_id};



    </insert>


    <!--查找节点储客计划-->
<select id="selectStoragePlan"  parameterType="java.util.Map" resultType="java.util.Map" >

select
  fgsnp.id,
  fgsnp.plan_id,
  fgsnp.plan_node_id,
  fgsnp.nide_name,

   DATE_FORMAT(fgsnp.node_time,'%Y-%m-%d') node_time,
    IFNULL(fgsnp.report_num,0) as report_num,
    IFNULL(fgsnp.visit_num,0) as visit_num,
    IFNULL(fgsnp.little_num,0) as little_num,
    IFNULL(fgsnp.little_per,0) as little_per,
    IFNULL(fgsnp.big_num,0) as big_num,
    IFNULL(fgsnp.big_per,0) as big_per,
    IFNULL(fgsnp.sub_num,0) as sub_num,
    IFNULL(fgsnp.make_per,0) as make_per,
  fgsnp.level,
  fgsnp.line_name,
  fgsnp.big_way,
  fgsnp.little_way,
   DATE_FORMAT(fgsnp.create_time,'%Y-%m-%d') create_time,
  ( CASE WHEN
  fpn.plan_end_time>=fgsnp.node_time
  THEN -1
  ELSE 1 END
  ) isWrite,
  flow_id,
    fgsnp.node_level
from
    fp_guest_storage_node_plan fgsnp
<if test="fake==null">
    <if test="flow_id==null">
        INNER JOIN

        (select id,plan_node_id FROM fp_guest_storage_flow fgsf
        where
        fgsf.plan_id=#{plan_id}
        AND fgsf.node_level=#{node_level}
        AND `change`!=2
        ORDER BY  version DESC  LIMIT 0,1  ) fgsf
        ON
        fgsf.id=fgsnp.flow_id
    </if>
    left join
    fp_plan_node fpn
    ON fgsnp.plan_node_id=fpn.id
    where fgsnp.plan_node_id=#{plan_node_id}
    <if test="flow_id!=null and flow_id!='' ">
        AND fgsnp.flow_id=#{flow_id}
    </if>
</if>
<if test="fake!=null and fake!='' ">
    left join
    (
    select plan_end_time from fp_plan_node where plan_id=#{plan_id}
    AND node_level=#{node_level} ORDER BY create_time DESC LIMIT 0,1
    ) fpn
    ON 1=1
    where fgsnp.plan_node_id=#{plan_node_id}
</if>
  ORDER BY node_time ASC,fgsnp.level ASC
</select>


    <!--初始化前三月等表的来访周拆分-->
    <insert id="insertNewStorageWeekFake" parameterType="java.util.Map">
        INSERT INTO fp_guest_storage_week (
        id,
        plan_id,
        plan_node_id,
        week,
        start_time,
        end_time,
        day_date,
        plan_add,
        plan_total,
        plan_task_per,
        actual_add,
        actual_total,
        actual_task_per,
        bias_value,
        week_bais_value,
        bias_per,

            flow_id,

        bias_cause
        )
        select * from (
        SELECT
        UUID() AS id,
        fgsw.plan_id,
        #{plan_node_id} AS plan_node_id,
        fgsw.week,
        fgsw.start_time,
        fgsw.end_time,
        fgsw.day_date,
        IFNULL (fgsw.plan_add,0) plan_add,
        IFNULL (fgsw.plan_total,0) plan_total,
        fgsw.plan_task_per,
        IFNULL (fcgs.visitCnt,0) actual_add,
        IFNULL (fcgsall.visitCnt,0) actual_total,
        ( CASE fgsw.plan_total WHEN 0  THEN 0  ELSE
        ROUND(IFNULL(fcgsall.visitCnt/fgsw.plan_total*100,0),0) END) actual_task_per,
        fgsw.plan_total- IFNULL(fcgsall.visitCnt,0)  bias_value,
        fgsw.plan_add-IFNULL(fcgs.visitCnt,0) week_bais_value,
        ( CASE fgsw.plan_total WHEN 0 THEN 0 ELSE
        ROUND(IFNULL(fgsw.plan_total-fcgsall.visitCnt,0)/fgsw.plan_total*100,0) END) bias_per,

            #{flow_id} AS flow_id,

        fgsw.bias_cause
        FROM
        fp_guest_storage_week fgsw


        INNER JOIN
        (
     select * from(  select id from fp_guest_storage_flow

            WHERE plan_id=#{plan_id}
            and node_level=4-1 and version=(SELECT version from fp_guest_storage_flow where
            plan_id=#{plan_id}
            and node_level=4-1 and approval_stuat=4 ORDER BY create_time DESC LIMIT 1)
           AND approval_stuat=4  LIMIT 1) a  LIMIT 1



        ) pni
        ON pni.id=fgsw.flow_id

        LEFT JOIN
        (SELECT
        IFNULL(SUM(visitCnt),0) visitCnt,project_id,fgsw.id
        FROM
        fp_comm_guest_storage fcgs
        LEFT JOIN
        fp_guest_storage_week fgsw
        ON 1=1
        WHERE
        project_id in (SELECT fpr.project_id FROM  fp_project_relationship fpr,
        (SELECT ID FROM fp_project_relationship where project_id=(select project_id from fp_plan where id=#{plan_id})  ) PID
        WHERE
        (fpr.id=PID.ID OR  fpr.pid=PID.ID ))
        AND
        fcgs.total_time &lt;= fgsw.end_time
        AND
        fcgs.total_time >= fgsw.start_time
        GROUP BY fgsw.id
        ) fcgs
        ON  fcgs.id=fgsw.id

        LEFT JOIN
        (SELECT
        IFNULL(SUM(visitCnt),0) visitCnt,project_id,fgsw.id
        FROM
        fp_comm_guest_storage fcgs
        LEFT JOIN
        (SELECT  MIN(fgsw.start_time) start_time, fgsw.flow_id FROM
        fp_guest_storage_week fgsw
        INNER JOIN
        (
        select id from fp_guest_storage_flow


            WHERE plan_id=#{plan_id}
            and node_level=4-1 and version=(SELECT version from fp_guest_storage_flow where
            plan_id=#{plan_id}
            and node_level=4-1 and approval_stuat=4 ORDER BY create_time DESC LIMIT 1)
           AND approval_stuat=4  LIMIT 1



        ) pni
        ON pni.id=fgsw.flow_id
        ) fgswMin  ON 1=1
        LEFT JOIN
        fp_guest_storage_week fgsw
        ON 1=1
        WHERE
        project_id in (SELECT fpr.project_id FROM  fp_project_relationship fpr,
        (SELECT ID FROM fp_project_relationship where project_id=(select project_id from fp_plan where id=#{plan_id})  ) PID
        WHERE
        (fpr.id=PID.ID OR  fpr.pid=PID.ID ))
        AND
        fcgs.total_time &lt;= fgsw.end_time
        AND   fcgs.total_time >= fgswMin.start_time
        GROUP BY fgsw.id
        ) fcgsall
        ON fcgsall.id=fgsw.id

        ORDER BY  fgsw.start_time) a
    </insert>


  <!--初始化前三月等表的来访周拆分-->
<insert id="insertNewStorageWeek" parameterType="java.util.Map">
INSERT INTO fp_guest_storage_week (
  id,
  plan_id,
  plan_node_id,
  week,
  start_time,
  end_time,
  day_date,
  plan_add,
  plan_total,
  plan_task_per,
  actual_add,
  actual_total,
  actual_task_per,
  bias_value,
  week_bais_value,
  bias_per,
    <if test="flow_id!=null and flow_id!=''">
      flow_id,
    </if>
  bias_cause
)
select * from(
  SELECT
  UUID() AS id,
  fgsw.plan_id,
#{plan_node_id} AS plan_node_id,
  fgsw.week,
  fgsw.start_time,
  fgsw.end_time,
  fgsw.day_date,
    IFNULL (fgsw.plan_add,0) plan_add,
    IFNULL (fgsw.plan_total,0) plan_total,
  fgsw.plan_task_per,
    IFNULL (fcgs.visitCnt,0) actual_add,
    IFNULL (fcgsall.visitCnt,0) actual_total,
    ( CASE fgsw.plan_total WHEN 0  THEN 0  ELSE
  ROUND(IFNULL(fcgsall.visitCnt/fgsw.plan_total*100,0),0) END) actual_task_per,
  fgsw.plan_total- IFNULL(fcgsall.visitCnt,0)  bias_value,
  fgsw.plan_add-IFNULL(fcgs.visitCnt,0) week_bais_value,
   ( CASE fgsw.plan_total WHEN 0 THEN 0 ELSE
  ROUND(IFNULL(fgsw.plan_total-fcgsall.visitCnt,0)/fgsw.plan_total*100,0) END) bias_per,
    <if test="flow_id!=null and flow_id!=''">
      #{flow_id} AS flow_id,
    </if>
  fgsw.bias_cause
  FROM
  fp_guest_storage_week fgsw


  INNER JOIN
  (
  select id from fp_guest_storage_flow
    <if test='flow_id==null or flow_id==""'>
            WHERE plan_id=#{plan_id}
            and node_level=#{node_level}-1 and version=(SELECT version from fp_guest_storage_flow where
            plan_id=#{plan_id}
            and node_level=#{node_level}-1 and approval_stuat=4 ORDER BY create_time DESC LIMIT 1)
           AND approval_stuat=4  LIMIT 1
    </if>
    <if test="flow_id!=null and flow_id!=''">
    WHERE id=#{flow_id}
</if>
  ) pni
  ON pni.id=fgsw.flow_id

  LEFT JOIN
    (SELECT
   IFNULL(SUM(visitCnt),0) visitCnt,project_id,fgsw.id
    FROM
    fp_comm_guest_storage fcgs
    LEFT JOIN
    fp_guest_storage_week fgsw
    ON 1=1
    WHERE
    project_id in (SELECT fpr.project_id FROM  fp_project_relationship fpr,
    (SELECT ID FROM fp_project_relationship where project_id=(select project_id from fp_plan where id=#{plan_id})  ) PID
    WHERE
    (fpr.id=PID.ID OR  fpr.pid=PID.ID ))
    AND
    fcgs.total_time &lt;= fgsw.end_time
    AND
    fcgs.total_time >= fgsw.start_time
    GROUP BY fgsw.id
    ) fcgs
ON  fcgs.id=fgsw.id

    LEFT JOIN
      (SELECT
    IFNULL(SUM(visitCnt),0) visitCnt,project_id,fgsw.id
    FROM
    fp_comm_guest_storage fcgs
    LEFT JOIN
    (SELECT  MIN(fgsw.start_time) start_time, fgsw.flow_id FROM
    fp_guest_storage_week fgsw
     INNER JOIN
  (
  select id from fp_guest_storage_flow

    <if test='flow_id==null or flow_id==""'>
        WHERE plan_id=#{plan_id}
        and node_level=#{node_level}-1 and version=(SELECT version from fp_guest_storage_flow where
        plan_id=#{plan_id}
        and node_level=#{node_level}-1 and approval_stuat=4 ORDER BY create_time DESC LIMIT 1)
           AND approval_stuat=4  LIMIT 1
    </if>
    <if test="flow_id!=null and flow_id!=''">
        WHERE id=#{flow_id}
    </if>
  ) pni
  ON pni.id=fgsw.flow_id
    ) fgswMin  ON 1=1
       LEFT JOIN
    fp_guest_storage_week fgsw
    ON 1=1
    WHERE
    project_id in (SELECT fpr.project_id FROM  fp_project_relationship fpr,
    (SELECT ID FROM fp_project_relationship where project_id=(select project_id from fp_plan where id=#{plan_id})  ) PID
    WHERE
    (fpr.id=PID.ID OR  fpr.pid=PID.ID ))
    AND
    fcgs.total_time &lt;= fgsw.end_time
    AND   fcgs.total_time >= fgswMin.start_time
    GROUP BY fgsw.id
    ) fcgsall
  ON fcgsall.id=fgsw.id

  ORDER BY  fgsw.start_time ) a
</insert>

  <!--查找前三月等表的来访周拆分-->
<select id="selectStorageWeek" parameterType="java.util.Map" resultType="java.util.Map">
   select * from ( SELECT
    fgsw.id,
    fgsw.plan_id,
    fgsw.plan_node_id,
    week,
    DATE_FORMAT(start_time,'%Y-%m-%d') start_time,
    DATE_FORMAT(fgsw.end_time,'%Y-%m-%d') end_time,
    day_date,
    plan_add,
    plan_total,
    ROUND(plan_task_per,0) plan_task_per,
    IFNULL(actual_add,0) actual_add,
    IFNULL(actual_total,0) actual_total,
    ROUND(actual_task_per,0) actual_task_per,
    bias_value,
    week_bais_value,
    ROUND(bias_per,0) bias_per,
    bias_cause ,
    ( CASE WHEN
    (CASE WHEN #{node_level}=4
    THEN  DATE_SUB(fpn.plan_start_time,INTERVAL 31 DAY)
    ELSE fpn.plan_start_time END)>fgsw.end_time
    THEN -1
    ELSE 1 END
    )  causeisWrite,
    ( CASE WHEN
    fpn.plan_end_time>=fgsw.end_time
    THEN -1
    ELSE 1 END
    ) isWrite,
    flow_id
    FROM
    fp_guest_storage_week fgsw
    <if test="fake==null">
        <if test='flow_id==null or flow_id==""'>
            INNER JOIN

            (select id,plan_node_id FROM fp_guest_storage_flow fgsf
            where
            fgsf.plan_id=#{plan_id}
            AND fgsf.node_level=#{node_level}
            AND `change`!=2
            ORDER BY  version DESC LIMIT 0,1  ) fgsf
            ON
            fgsf.id=fgsw.flow_id
        </if>
        left join
        fp_plan_node fpn
        ON fgsw.plan_node_id=fpn.id
        where fgsw.plan_node_id=#{plan_node_id}
        <if test="flow_id!=null and flow_id!='' ">
            AND fgsw.flow_id=#{flow_id}
        </if>
    </if>
    <if test="fake!=null and fake!='' ">
        LEFT JOIN
        (
        SELECT plan_start_time,plan_end_time FROM fp_plan_node WHERE plan_id=#{plan_id}
        AND node_level=#{node_level} ORDER BY create_time DESC LIMIT  0,1
        ) fpn
        ON 1=1
        WHERE fgsw.plan_node_id=#{plan_node_id}
    </if>
    AND week='完整波段' limit 1) b
UNION ALL

    select * from
(SELECT
  fgsw.id,
  fgsw.plan_id,
  fgsw.plan_node_id,
  week,
 DATE_FORMAT(start_time,'%Y-%m-%d') start_time,
   DATE_FORMAT(fgsw.end_time,'%Y-%m-%d') end_time,
  day_date,
  plan_add,
  plan_total,
  ROUND(plan_task_per,0) plan_task_per,
  IFNULL(actual_add,0) actual_add,
    IFNULL(actual_total,0) actual_total,
    ROUND(actual_task_per,0) actual_task_per,
  bias_value,
  week_bais_value,
    ROUND(bias_per,0) bias_per,
  bias_cause ,
    ( CASE WHEN
    (CASE WHEN #{node_level}=4
    THEN  DATE_SUB(fpn.plan_start_time,INTERVAL 31 DAY)
    ELSE fpn.plan_start_time END)>fgsw.end_time
  THEN -1
  ELSE 1 END
  )  causeisWrite,
    ( CASE WHEN
     fpn.plan_end_time>=fgsw.end_time
    THEN -1
    ELSE 1 END
    ) isWrite,
  flow_id
FROM
  fp_guest_storage_week fgsw
    <if test="fake==null">
        <if test='flow_id==null or flow_id==""'>
        INNER JOIN

        (select id,plan_node_id FROM fp_guest_storage_flow fgsf
        where
        fgsf.plan_id=#{plan_id}
        AND fgsf.node_level=#{node_level}
        AND `change`!=2
        ORDER BY  version DESC LIMIT 0,1  ) fgsf
        ON
        fgsf.id=fgsw.flow_id
    </if>
    left join
    fp_plan_node fpn
    ON fgsw.plan_node_id=fpn.id
    where fgsw.plan_node_id=#{plan_node_id}
    <if test="flow_id!=null and flow_id!='' ">
        AND fgsw.flow_id=#{flow_id}
    </if>
  </if>
    <if test="fake!=null and fake!='' ">
        LEFT JOIN
        (
        SELECT plan_start_time,plan_end_time FROM fp_plan_node WHERE plan_id=#{plan_id}
        AND node_level=#{node_level} ORDER BY create_time DESC LIMIT  0,1
        ) fpn
        ON 1=1
        WHERE fgsw.plan_node_id=#{plan_node_id}
    </if>
    AND week!='完整波段' ORDER BY start_time asc, end_time asc limit 99999999999
  ) a
</select>

    <!--更新首开前7天的时候同时要更新计划表开盘时间-->
 <update id="updateOpenTime" parameterType="java.util.Map" >

UPDATE
fp_plan
SET open_time=#{open_time}
WHERE
id=#{plan_id}
 </update>


    <!--判断节点是否可以发起一个新的流程,若有返回值说明不合格-->
    <select id="designAllCan" parameterType="java.util.Map" resultType="java.util.Map">
        SELECT id
FROM
fp_plan_node
WHERE
node_level>#{node_level}
AND
plan_approval IN(3,4)
 AND is_del=0
AND plan_id=#{plan_id}
UNION
ALL
(
SELECT id
FROM
fp_plan_node
WHERE
node_level=#{node_level}-1
AND
plan_approval!=4
 AND is_del=0 AND plan_id=#{plan_id}
ORDER BY create_time DESC LIMIT 0,1)
UNION
ALL
SELECT id FROM
  fp_guest_storage_flow
  WHERE plan_id=#{plan_id}
  AND node_level=#{node_level}
 AND (  approval_stuat IN(2,3,10) OR approval_stuat IS NULL)
UNION
ALL
  SELECT id
FROM
fp_plan_node
WHERE
node_level=#{node_level}
AND
(plan_approval IN(2,3,10) OR plan_approval IS NULL)
 AND is_del=0
AND plan_id=#{plan_id}
    </select>



    <!--用于初始化后删除库里数据-->
   <delete id="deleteForPlanId" parameterType="java.lang.String">

DELETE FROM fp_guest_storage_node_plan WHERE plan_node_id=#{plan_node_id};

DELETE FROM fp_guest_storage_week WHERE plan_node_id=#{plan_node_id}
   </delete>


    <!--更改首开前3个月等页面的变更客储计划字段-->
<update id="updateChangeState"  parameterType="java.util.Map">
        UPDATE
        fp_guest_storage_flow
        SET
        `change`=#{change}
        WHERE
        id=#{flow_id}
</update>

    <!--挑选首开前3个月等页面的变更客储计划字段-->
 <select id="selectChangeState"   parameterType="java.util.Map"  resultType="java.lang.Integer" >
   SELECT
  IFNULL(`change`,0) `change`
FROM
 fp_guest_storage_flow
   WHERE
        id=#{flow_id}
 </select>


    <!--初始化客储计划节点储客计划-->
    <update id="insertStorageNodePlan" parameterType="arraylist">
        INSERT INTO fp_guest_storage_node_plan (
        id,
        plan_id,
        plan_node_id,
        nide_name,
        node_time,
        report_num,
        visit_num,
        little_num,
        little_per,
        big_num,
        big_per,
        sub_num,
        make_per,
        level,
        line_name,
        node_level,
        little_way,
        big_way,
        flow_id,
        create_time
        )
        VALUES
        <foreach collection="list" index="index" separator="," item="item">
            (
            UUID(),
            #{item.plan_id},
            #{item.plan_node_id},
            #{item.nide_name},
            #{item.node_time},
            #{item.report_num},
            #{item.visit_num},
            #{item.little_num},
            #{item.little_per},
            #{item.big_num},
            #{item.big_per},
            #{item.sub_num},
            #{item.make_per},
            #{item.level},
            #{item.line_name},
            #{item.node_level},
           #{item.little_way},
            #{item.big_way},
            #{item.flow_id},
            #{item.create_time}
            )
        </foreach>

    </update>

    <!--检查顶设2是否有一个审批通过的版本-->
    <select id="selectDesignTwoFour"  parameterType="java.util.Map"  resultType="java.lang.Integer">



SELECT COUNT(id) FROM `fp_plan_node` WHERE node_level=3 AND plan_approval=4 AND plan_id=#{plan_id}


    </select>

    <!--查找来自开盘前21天里是否有已经审批完整的数据，若有则从里面取-->
<select id="selectCountSix"  parameterType="java.util.Map"  resultType="java.util.Map">
    SELECT
COUNT(fgsnp.id) one,

(SELECT COUNT(0) FROM `fp_delay_apply` WHERE plan_id=#{plan_id}
	 AND approval_stuat =4) two
FROM
`fp_guest_storage_node_plan` fgsnp
LEFT JOIN
`fp_guest_storage_flow` fpn ON fpn.id=fgsnp.flow_id
WHERE
fpn.plan_id=#{plan_id}
AND fpn.node_level=6
AND fpn.approval_stuat=4
</select>

<!--查找开盘前21天里最新的版本-->
  <select id="selectBestNewSix"  parameterType="java.util.Map"  resultType="java.util.Map">

select

  fgsnp.plan_id,
  fgsnp.plan_node_id,
  fgsnp.nide_name,

   DATE_FORMAT(fgsnp.node_time,'%Y-%m-%d') node_time,
  fgsnp.report_num,
  fgsnp.visit_num,
  fgsnp.little_num,
  ROUND(fgsnp.little_per,0) little_per,
  fgsnp.big_num,
    ROUND(fgsnp.big_per,0) big_per,
  fgsnp.sub_num,
    ROUND(fgsnp.make_per,0) make_per,
  fgsnp.level,
  fgsnp.line_name,
  fgsnp.big_way,
  fgsnp.little_way,
   DATE_FORMAT(fgsnp.create_time,'%Y-%m-%d') create_time,
  ( CASE WHEN
  fpn.plan_end_time>=fgsnp.node_time
  THEN -1
  ELSE 1 END
  ) isWrite,

    fgsnp.node_level
from
    fp_guest_storage_node_plan fgsnp
     left join
    fp_plan_node fpn
    ON fgsnp.plan_node_id=fpn.id
    where  fgsnp.flow_id=(select id from fp_guest_storage_flow where plan_id=#{plan_id} and node_level=6 order by version desc limit 1 )
       ORDER BY node_time ASC,fgsnp.level ASC



  </select>

    <!--查找开盘前21天里的周拆分-->
   <select id="selectSixWeekList"  parameterType="java.util.Map"  resultType="java.util.Map">

        select * from (  SELECT

    fgsw.plan_id,
    fgsw.plan_node_id,
    week,
    DATE_FORMAT(start_time,'%Y-%m-%d') start_time,
    DATE_FORMAT(fgsw.end_time,'%Y-%m-%d') end_time,
    day_date,
    plan_add,
    plan_total,
    ROUND(plan_task_per,0) plan_task_per,
    IFNULL(actual_add,0) actual_add,
    IFNULL(actual_total,0) actual_total,
    ROUND(actual_task_per,0) actual_task_per,
    bias_value,
    week_bais_value,
    ROUND(bias_per,0) bias_per,
    bias_cause ,
    ( CASE WHEN
     fpn.plan_start_time>fgsw.end_time
    THEN -1
    ELSE 1 END
    )  causeisWrite,
    ( CASE WHEN
    fpn.plan_end_time>=fgsw.end_time
    THEN -1
    ELSE 1 END
    ) isWrite

    FROM
    fp_guest_storage_week fgsw
      LEFT JOIN
        fp_plan_node fpn
        ON fgsw.plan_node_id=fpn.id
        WHERE fgsw.flow_id=(select id from fp_guest_storage_flow where plan_id=#{plan_id} and node_level=6 order by version desc limit 1 )

           AND week='完整波段' limit 1) b
        UNION ALL

    SELECT * FROM
(SELECT

  fgsw.plan_id,
  fgsw.plan_node_id,
  week,
 DATE_FORMAT(start_time,'%Y-%m-%d') start_time,
   DATE_FORMAT(fgsw.end_time,'%Y-%m-%d') end_time,
  day_date,
  plan_add,
  plan_total,
  ROUND(plan_task_per,0) plan_task_per,
  IFNULL(actual_add,0) actual_add,
    IFNULL(actual_total,0) actual_total,
    ROUND(actual_task_per,0) actual_task_per,
  bias_value,
  week_bais_value,
    ROUND(bias_per,0) bias_per,
  bias_cause ,
    ( CASE WHEN
     fpn.plan_start_time>fgsw.end_time
  THEN -1
  ELSE 1 END
  )  causeisWrite,
    ( CASE WHEN
     fpn.plan_end_time>=fgsw.end_time
    THEN -1
    ELSE 1 END
    ) isWrite
FROM
  fp_guest_storage_week fgsw
   LEFT JOIN
    fp_plan_node fpn
    ON fgsw.plan_node_id=fpn.id
    WHERE  fgsw.flow_id=(select id from fp_guest_storage_flow where plan_id=#{plan_id} and node_level=6 order by version desc limit 1 )

    AND week!='完整波段' 	ORDER BY
				start_time ASC,
			end_time ASC  limit 9999999999 ) a
   </select>

<update id="deleteOnlyNode" parameterType="java.util.Map">
    DELETE FROM fp_guest_storage_node_plan WHERE flow_id=#{flow_id} AND level=1;
    DELETE FROM fp_guest_storage_node_plan WHERE flow_id=#{flow_id} AND node_level in(6,7,8);
</update>
    <update id="deleteOnlyNodeTwo" parameterType="java.util.Map">
    delete from fp_guest_storage_node_plan where leve in (2,3) and flow_id=#{flow_id}
        AND
</update>

    <!--获取三大件的时间节点-->
    <select id="getThreepiecesForSalesTimes" parameterType="java.util.Map" resultType="java.util.Map">
SELECT
DATE_FORMAT(plan_end_time,'%Y-%m-%d') sales_plan_endTime,
DATE_FORMAT(actual_finish_time,'%Y-%m-%d') sales_finishTime
FROM
	fp_plan_node
WHERE
	plan_id = #{plan_id}
	AND node_level = 10
ORDER BY
	is_effective
	LIMIT 1
    </select>
    <select id="getThreepiecesForSampleTimes" parameterType="java.util.Map" resultType="java.util.Map">
SELECT
    DATE_FORMAT(plan_end_time,'%Y-%m-%d')  sample_plan_endTime,
    DATE_FORMAT(actual_finish_time,'%Y-%m-%d')  sample_finishTime
FROM
	fp_plan_node
WHERE
	plan_id = #{plan_id}
	AND node_level = 11
ORDER BY
	is_effective
	LIMIT 1
    </select>



    <!--根据流程id获取客储节点-->
    <select id="getStorageDataByFlow" resultType="java.util.Map" ></select>


    <insert id="initCustomerStorageData" parameterType="java.util.Map">
		INSERT INTO fp_guest_storage_node_plan (
		id,
		plan_id,
		plan_node_id,
		nide_name,
		node_time,
		report_num,
		visit_num,
		little_num,
		little_per,
		big_num,
		big_per,
		sub_num,
		make_per,
		level,
		line_name,
		node_level,
		create_time,
		little_way,
		flow_id,
		big_way

		)
			select * from(
		SELECT
		UUID() AS id,
		#{plan_id} AS plan_id,
		#{plan_node_id} AS plan_node_id,
		'首开前3个月'   AS nide_name,
		fdn.open_time AS node_time,
		SUM(reportCnt) report_num,
		SUM(visitCnt) visit_num,
		SUM(lesser_card) little_num,
		ROUND(SUM(lesser_card)/CASE WHEN SUM(visitCnt)=0 THEN NULL  ELSE SUM(visitCnt) END*100,0) little_per,
		SUM(big_card) big_num,
		ROUND(SUM(big_card)/CASE WHEN SUM(lesser_card)=0 THEN NULL  ELSE SUM(lesser_card) END*100,0) big_per,
		SUM(subscribe_num) sub_num,
		ROUND(SUM(subscribe_num)/CASE WHEN SUM(visitCnt)=0 THEN NULL  ELSE SUM(visitCnt) END*100,0) make_per,
		2 AS level,
		'实际' AS line_name,
		4 AS node_level,
		MAX(fcgs.create_time) create_time,
		NULL AS little_way,
		#{flow_id} AS flow_id,
		NULL AS big_way

		FROM
		fp_comm_guest_storage fcgs
LEFT JOIN
		(SELECT
		DATE_SUB(open_time,INTERVAL 90 DAY) open_time,project_id
		FROM
		fp_plan fp
		WHERE id=#{plan_id}
		) fdn
		ON 1=1
		WHERE
		fcgs.total_time &lt;= fdn.open_time
		and
		fcgs.project_id in (SELECT fpr.project_id FROM  fp_project_relationship fpr,
		(SELECT ID FROM fp_project_relationship where project_id=(select project_id from fp_plan where id=#{plan_id})  ) PID
		WHERE
		(fpr.id=PID.ID OR  fpr.pid=PID.ID ))
		UNION ALL

		SELECT
		UUID() AS id,
		#{plan_id} AS plan_id,
		#{plan_node_id} AS plan_node_id,
		'首开前2个月'   AS nide_name,
		fdn.open_time AS node_time,
		SUM(reportCnt) report_num,
		SUM(visitCnt) visit_num,
		SUM(lesser_card) little_num,
		ROUND(SUM(lesser_card)/CASE WHEN SUM(visitCnt)=0 THEN NULL ELSE SUM(visitCnt)  END*100,0) little_per,
		SUM(big_card) big_num,
		ROUND(SUM(big_card)/CASE WHEN SUM(lesser_card)=0 THEN NULL ELSE SUM(lesser_card)  END*100,0) big_per,
		SUM(subscribe_num) sub_num,
		ROUND(SUM(subscribe_num)/CASE WHEN SUM(visitCnt)=0 THEN NULL ELSE SUM(visitCnt)  END*100,0) make_per,
		2 AS level,
		'实际' AS line_name,
		5 AS node_level,
		MAX(fcgs.create_time) create_time, NULL AS little_way,#{flow_id} AS flow_id,  NULL AS big_way
		FROM
		fp_comm_guest_storage fcgs
	LEFT JOIN
		(SELECT
		DATE_SUB(open_time,INTERVAL 60 DAY) open_time,project_id
		FROM
		fp_plan fp
		WHERE id=#{plan_id}
		) fdn
		ON 1=1
		WHERE
		fcgs.total_time &lt;= fdn.open_time
		and
		fcgs.project_id in (SELECT fpr.project_id FROM  fp_project_relationship fpr,
		(SELECT ID FROM fp_project_relationship where project_id=(select project_id from fp_plan where id=#{plan_id})  ) PID
		WHERE
		(fpr.id=PID.ID OR  fpr.pid=PID.ID ))


		UNION ALL

		SELECT
		UUID() AS id,
		#{plan_id} AS plan_id,
		#{plan_node_id} AS plan_node_id,
		'首开前21天'   AS nide_name,
		fdn.open_time AS node_time,
		SUM(reportCnt) report_num,
		SUM(visitCnt) visit_num,
		SUM(lesser_card) little_num,
		ROUND(SUM(lesser_card)/CASE WHEN SUM(visitCnt)=0 THEN NULL ELSE SUM(visitCnt) END*100,0) little_per,
		SUM(big_card) big_num,
		ROUND(SUM(big_card)/CASE WHEN SUM(lesser_card)=0 THEN NULL ELSE SUM(lesser_card) END*100,0) big_per,
		SUM(subscribe_num) sub_num,
		ROUND(SUM(subscribe_num)/CASE WHEN SUM(visitCnt)=0 THEN NULL ELSE SUM(visitCnt) END*100,0) make_per,
		2 AS level,
		'实际' AS line_name,
		6 AS node_level,
		MAX(fcgs.create_time) create_time, NULL AS little_way,#{flow_id} AS flow_id,  NULL AS big_way
		FROM
		fp_comm_guest_storage fcgs
		LEFT JOIN
		(SELECT
		DATE_SUB(open_time,INTERVAL 21 DAY) open_time,project_id
		FROM
		fp_plan fp
		WHERE id=#{plan_id}
		) fdn
		ON 1=1
		WHERE
		fcgs.total_time &lt;= fdn.open_time
		and
		fcgs.project_id in (SELECT fpr.project_id FROM  fp_project_relationship fpr,
		(SELECT ID FROM fp_project_relationship where project_id=(select project_id from fp_plan where id=#{plan_id})  ) PID
		WHERE
		(fpr.id=PID.ID OR  fpr.pid=PID.ID ))
		UNION ALL

		SELECT
		UUID() AS id,
		#{plan_id} AS plan_id,
		#{plan_node_id} AS plan_node_id,
		'首开前7天'   AS nide_name,
		fdn.open_time AS node_time,
		SUM(reportCnt) report_num,
		SUM(visitCnt) visit_num,
		SUM(lesser_card) little_num,
		ROUND(SUM(lesser_card)/CASE WHEN SUM(visitCnt)=0 THEN NULL ELSE SUM(visitCnt) END*100,0) little_per,
		SUM(big_card) big_num,
		ROUND(SUM(big_card)/CASE WHEN SUM(lesser_card)=0 THEN NULL ELSE SUM(lesser_card) END*100,0) big_per,
		SUM(subscribe_num) sub_num,
		ROUND(SUM(subscribe_num)/CASE WHEN SUM(visitCnt)=0 THEN NULL ELSE SUM(visitCnt) END*100,0) make_per,
		2 AS level,
		'实际' AS line_name,
		7 AS node_level,
		MAX(fcgs.create_time) create_time, NULL AS little_way, #{flow_id} AS flow_id, NULL AS big_way
		FROM
		fp_comm_guest_storage fcgs
		LEFT JOIN
		(SELECT
		DATE_SUB(open_time,INTERVAL 7 DAY) open_time,project_id
		FROM
		fp_plan fp
		WHERE id=#{plan_id}
		) fdn
		ON 1=1
		WHERE
		fcgs.total_time &lt;= fdn.open_time
		and
		fcgs.project_id in (SELECT fpr.project_id FROM  fp_project_relationship fpr,
		(SELECT ID FROM fp_project_relationship where project_id=(select project_id from fp_plan where id=#{plan_id})  ) PID
		WHERE
		(fpr.id=PID.ID OR  fpr.pid=PID.ID ))

		UNION ALL

		SELECT
		UUID() AS id,
		#{plan_id} AS plan_id,
		#{plan_node_id} AS plan_node_id,
		'首开'   AS nide_name,
		fdn.open_time AS node_time,
		SUM(reportCnt) report_num,
		SUM(visitCnt) visit_num,
		SUM(lesser_card) little_num,
		ROUND(SUM(lesser_card)/CASE WHEN SUM(visitCnt)=0 THEN NULL ELSE SUM(visitCnt) END*100,0) little_per,
		SUM(big_card) big_num,
		ROUND(SUM(big_card)/CASE WHEN SUM(lesser_card)=0 THEN NULL ELSE SUM(lesser_card) END*100,0) big_per,
		SUM(subscribe_num) sub_num,
		ROUND(SUM(subscribe_num)/CASE WHEN SUM(visitCnt)=0 THEN NULL ELSE SUM(visitCnt) END*100,0) make_per,
		2 AS level,
		'实际' AS line_name,
		8 AS node_level,
		MAX(fcgs.create_time) create_time, NULL AS little_way, #{flow_id} AS flow_id, NULL AS big_way
		FROM
		fp_comm_guest_storage fcgs
		LEFT JOIN
		(SELECT
		open_time
		open_time,project_id
		FROM
		fp_plan fp
		WHERE id=#{plan_id}
		) fdn
		ON 1=1
		WHERE
		fcgs.total_time &lt;= fdn.open_time
		and
		fcgs.project_id in (SELECT fpr.project_id FROM  fp_project_relationship fpr,
		(SELECT ID FROM fp_project_relationship where project_id=(select project_id from fp_plan where id=#{plan_id})  ) PID
		WHERE
		(fpr.id=PID.ID OR  fpr.pid=PID.ID ))
		UNION ALL
		SELECT
		UUID() AS id,
		plan_id,
		#{plan_node_id} AS plan_node_id,
		nide_name,
		node_time,
		report_num,
		visit_num,
		little_num,
		little_per,
		big_num,
		big_per,
		sub_num,
		make_per,
		level,
		line_name,

		node_level,
		NOW() create_time,
		little_way,
		#{flow_id} AS flow_id,
		big_way
		FROM
		fp_guest_storage_node_plan fgsnp

		INNER  JOIN
		(
		SELECT id FROM
		fp_guest_storage_flow
		where id=#{thisNode_flow_id}
		) pni
		ON pni.id=fgsnp.flow_id
		AND level=1
		)  a ;

INSERT INTO fp_guest_storage_node_plan (
  id,
  plan_id,
 plan_node_id,
  nide_name,
  node_time,
  report_num,
  visit_num,
  little_num,

  big_num,

  sub_num,

  level,
  line_name,
  node_level,
  flow_id
)
SELECT
  UUID() AS id,
  LEVEL1.plan_id,
  #{plan_node_id} AS plan_node_id,
   LEVEL1.nide_name,
  LEVEL1.node_time,
  IFNULL(ROUND((LEVEL1.report_num- LEVEL2.report_num)/(CASE WHEN LEVEL1.report_num=0  THEN NULL ELSE LEVEL1.report_num END)*100,0) ,0)   report_num,
   IFNULL(ROUND((LEVEL1.visit_num- LEVEL2.visit_num)/(CASE WHEN LEVEL1.visit_num=0  THEN NULL ELSE LEVEL1.visit_num END)*100,0),0)   visit_num,
    IFNULL(ROUND((LEVEL1.little_num- LEVEL2.little_num)/(CASE WHEN LEVEL1.little_num=0  THEN NULL ELSE LEVEL1.little_num END)*100,0),0) little_num,

  IFNULL(ROUND((LEVEL1.big_num- LEVEL2.big_num)/(CASE WHEN LEVEL1.big_num=0 THEN NULL ELSE LEVEL1.big_num END)*100,0) ,0) big_num,

IFNULL(ROUND((LEVEL1.sub_num- LEVEL2.sub_num)/(CASE WHEN LEVEL1.sub_num=0 THEN NULL ELSE LEVEL1.sub_num END)*100,0) ,0)  sub_num,

  3 AS level,
  '偏差率%' AS line_name,
   LEVEL1.node_level,
   #{flow_id} AS flow_id
FROM
fp_guest_storage_node_plan LEVEL1
LEFT JOIN
(
SELECT *FROM
fp_guest_storage_node_plan
WHERE LEVEL=2) LEVEL2
ON LEVEL1.plan_node_id=LEVEL2.plan_node_id AND LEVEL1.node_time=LEVEL2.node_time
AND   LEVEL1.nide_name=LEVEL2.nide_name
WHERE
LEVEL1.LEVEL=1
AND
LEVEL1.plan_node_id
=#{plan_node_id}

	</insert>

    <!--如果进行过抢开，使用这个更新数据-->
    <insert id="initCustomerStorageDataQk" parameterType="java.util.Map">
		INSERT INTO fp_guest_storage_node_plan (
		id,
		plan_id,
		plan_node_id,
		nide_name,
		node_time,
		report_num,
		visit_num,
		little_num,
		little_per,
		big_num,
		big_per,
		sub_num,
		make_per,
		level,
		line_name,
		node_level,
		create_time,
		little_way,
		flow_id,
		big_way

		)
			select * from(
		SELECT
		UUID() AS id,
		#{plan_id} AS plan_id,
		#{plan_node_id} AS plan_node_id,
		'首开前3个月'   AS nide_name,
		#{threeTime} AS node_time,
		SUM(reportCnt) report_num,
		SUM(visitCnt) visit_num,
		SUM(lesser_card) little_num,
		ROUND(SUM(lesser_card)/CASE WHEN SUM(visitCnt)=0 THEN NULL  ELSE SUM(visitCnt) END*100,0) little_per,
		SUM(big_card) big_num,
		ROUND(SUM(big_card)/CASE WHEN SUM(lesser_card)=0 THEN NULL  ELSE SUM(lesser_card) END*100,0) big_per,
		SUM(subscribe_num) sub_num,
		ROUND(SUM(subscribe_num)/CASE WHEN SUM(visitCnt)=0 THEN NULL  ELSE SUM(visitCnt) END*100,0) make_per,
		2 AS level,
		'实际' AS line_name,
		4 AS node_level,
		MAX(fcgs.create_time) create_time,
		NULL AS little_way,
		#{flow_id} AS flow_id,
		NULL AS big_way

		FROM
		fp_comm_guest_storage fcgs
		WHERE
		fcgs.total_time &lt;= #{threeTime}
		and
		fcgs.project_id in (SELECT fpr.project_id FROM  fp_project_relationship fpr,
		(SELECT ID FROM fp_project_relationship where project_id=(select project_id from fp_plan where id=#{plan_id})  ) PID
		WHERE
		(fpr.id=PID.ID OR  fpr.pid=PID.ID ))
		UNION ALL

		SELECT
		UUID() AS id,
		#{plan_id} AS plan_id,
		#{plan_node_id} AS plan_node_id,
		'首开前2个月'   AS nide_name,
		#{twoTime} AS node_time,
		SUM(reportCnt) report_num,
		SUM(visitCnt) visit_num,
		SUM(lesser_card) little_num,
		ROUND(SUM(lesser_card)/CASE WHEN SUM(visitCnt)=0 THEN NULL ELSE SUM(visitCnt)  END*100,0) little_per,
		SUM(big_card) big_num,
		ROUND(SUM(big_card)/CASE WHEN SUM(lesser_card)=0 THEN NULL ELSE SUM(lesser_card)  END*100,0) big_per,
		SUM(subscribe_num) sub_num,
		ROUND(SUM(subscribe_num)/CASE WHEN SUM(visitCnt)=0 THEN NULL ELSE SUM(visitCnt)  END*100,0) make_per,
		2 AS level,
		'实际' AS line_name,
		5 AS node_level,
		MAX(fcgs.create_time) create_time, NULL AS little_way,#{flow_id} AS flow_id,  NULL AS big_way
		FROM
		fp_comm_guest_storage fcgs
		WHERE
		fcgs.total_time &lt;= #{twoTime}
		and
		fcgs.project_id in (SELECT fpr.project_id FROM  fp_project_relationship fpr,
		(SELECT ID FROM fp_project_relationship where project_id=(select project_id from fp_plan where id=#{plan_id})  ) PID
		WHERE
		(fpr.id=PID.ID OR  fpr.pid=PID.ID ))


		UNION ALL

		SELECT
		UUID() AS id,
		#{plan_id} AS plan_id,
		#{plan_node_id} AS plan_node_id,
		'首开前21天'   AS nide_name,
		fdn.open_time AS node_time,
		SUM(reportCnt) report_num,
		SUM(visitCnt) visit_num,
		SUM(lesser_card) little_num,
		ROUND(SUM(lesser_card)/CASE WHEN SUM(visitCnt)=0 THEN NULL ELSE SUM(visitCnt) END*100,0) little_per,
		SUM(big_card) big_num,
		ROUND(SUM(big_card)/CASE WHEN SUM(lesser_card)=0 THEN NULL ELSE SUM(lesser_card) END*100,0) big_per,
		SUM(subscribe_num) sub_num,
		ROUND(SUM(subscribe_num)/CASE WHEN SUM(visitCnt)=0 THEN NULL ELSE SUM(visitCnt) END*100,0) make_per,
		2 AS level,
		'实际' AS line_name,
		6 AS node_level,
		MAX(fcgs.create_time) create_time, NULL AS little_way,#{flow_id} AS flow_id,  NULL AS big_way
		FROM
		fp_comm_guest_storage fcgs
		LEFT JOIN
		(SELECT
		DATE_SUB(open_time,INTERVAL 21 DAY) open_time,project_id
		FROM
		fp_plan fp
		WHERE id=#{plan_id}
		) fdn
		ON 1=1
		WHERE
		fcgs.total_time &lt;= fdn.open_time
		and
		fcgs.project_id in (SELECT fpr.project_id FROM  fp_project_relationship fpr,
		(SELECT ID FROM fp_project_relationship where project_id=(select project_id from fp_plan where id=#{plan_id})  ) PID
		WHERE
		(fpr.id=PID.ID OR  fpr.pid=PID.ID ))
		UNION ALL

		SELECT
		UUID() AS id,
		#{plan_id} AS plan_id,
		#{plan_node_id} AS plan_node_id,
		'首开前7天'   AS nide_name,
		fdn.open_time AS node_time,
		SUM(reportCnt) report_num,
		SUM(visitCnt) visit_num,
		SUM(lesser_card) little_num,
		ROUND(SUM(lesser_card)/CASE WHEN SUM(visitCnt)=0 THEN NULL ELSE SUM(visitCnt) END*100,0) little_per,
		SUM(big_card) big_num,
		ROUND(SUM(big_card)/CASE WHEN SUM(lesser_card)=0 THEN NULL ELSE SUM(lesser_card) END*100,0) big_per,
		SUM(subscribe_num) sub_num,
		ROUND(SUM(subscribe_num)/CASE WHEN SUM(visitCnt)=0 THEN NULL ELSE SUM(visitCnt) END*100,0) make_per,
		2 AS level,
		'实际' AS line_name,
		7 AS node_level,
		MAX(fcgs.create_time) create_time, NULL AS little_way, #{flow_id} AS flow_id, NULL AS big_way
		FROM
		fp_comm_guest_storage fcgs
		LEFT JOIN
		(SELECT
		DATE_SUB(open_time,INTERVAL 7 DAY) open_time,project_id
		FROM
		fp_plan fp
		WHERE id=#{plan_id}
		) fdn
		ON 1=1
		WHERE
		fcgs.total_time &lt;= fdn.open_time
		and
		fcgs.project_id in (SELECT fpr.project_id FROM  fp_project_relationship fpr,
		(SELECT ID FROM fp_project_relationship where project_id=(select project_id from fp_plan where id=#{plan_id})  ) PID
		WHERE
		(fpr.id=PID.ID OR  fpr.pid=PID.ID ))

		UNION ALL

		SELECT
		UUID() AS id,
		#{plan_id} AS plan_id,
		#{plan_node_id} AS plan_node_id,
		'首开'   AS nide_name,
		fdn.open_time AS node_time,
		SUM(reportCnt) report_num,
		SUM(visitCnt) visit_num,
		SUM(lesser_card) little_num,
		ROUND(SUM(lesser_card)/CASE WHEN SUM(visitCnt)=0 THEN NULL ELSE SUM(visitCnt) END*100,0) little_per,
		SUM(big_card) big_num,
		ROUND(SUM(big_card)/CASE WHEN SUM(lesser_card)=0 THEN NULL ELSE SUM(lesser_card) END*100,0) big_per,
		SUM(subscribe_num) sub_num,
		ROUND(SUM(subscribe_num)/CASE WHEN SUM(visitCnt)=0 THEN NULL ELSE SUM(visitCnt) END*100,0) make_per,
		2 AS level,
		'实际' AS line_name,
		8 AS node_level,
		MAX(fcgs.create_time) create_time, NULL AS little_way, #{flow_id} AS flow_id, NULL AS big_way
		FROM
		fp_comm_guest_storage fcgs
		LEFT JOIN
		(SELECT
		open_time
		open_time,project_id
		FROM
		fp_plan fp
		WHERE id=#{plan_id}
		) fdn
		ON 1=1
		WHERE
		fcgs.total_time &lt;= fdn.open_time
		and
		fcgs.project_id in (SELECT fpr.project_id FROM  fp_project_relationship fpr,
		(SELECT ID FROM fp_project_relationship where project_id=(select project_id from fp_plan where id=#{plan_id})  ) PID
		WHERE
		(fpr.id=PID.ID OR  fpr.pid=PID.ID ))
		UNION ALL
		SELECT
		UUID() AS id,
		plan_id,
		#{plan_node_id} AS plan_node_id,
		nide_name,
		node_time,
		report_num,
		visit_num,
		little_num,
		little_per,
		big_num,
		big_per,
		sub_num,
		make_per,
		level,
		line_name,

		node_level,
		NOW() create_time,
		little_way,
		#{flow_id} AS flow_id,
		big_way
		FROM
		fp_guest_storage_node_plan fgsnp

		INNER  JOIN
		(
		SELECT id FROM
		fp_guest_storage_flow
		where id=#{thisNode_flow_id}
		) pni
		ON pni.id=fgsnp.flow_id
		AND level=1
		)  a ;

INSERT INTO fp_guest_storage_node_plan (
  id,
  plan_id,
 plan_node_id,
  nide_name,
  node_time,
  report_num,
  visit_num,
  little_num,

  big_num,

  sub_num,

  level,
  line_name,
  node_level,
  flow_id
)
SELECT
  UUID() AS id,
  LEVEL1.plan_id,
  #{plan_node_id} AS plan_node_id,
   LEVEL1.nide_name,
  LEVEL1.node_time,
  IFNULL(ROUND((LEVEL1.report_num- LEVEL2.report_num)/(CASE WHEN LEVEL1.report_num=0  THEN NULL ELSE LEVEL1.report_num END)*100,0) ,0)   report_num,
   IFNULL(ROUND((LEVEL1.visit_num- LEVEL2.visit_num)/(CASE WHEN LEVEL1.visit_num=0  THEN NULL ELSE LEVEL1.visit_num END)*100,0),0)   visit_num,
    IFNULL(ROUND((LEVEL1.little_num- LEVEL2.little_num)/(CASE WHEN LEVEL1.little_num=0  THEN NULL ELSE LEVEL1.little_num END)*100,0),0) little_num,

  IFNULL(ROUND((LEVEL1.big_num- LEVEL2.big_num)/(CASE WHEN LEVEL1.big_num=0 THEN NULL ELSE LEVEL1.big_num END)*100,0) ,0) big_num,

IFNULL(ROUND((LEVEL1.sub_num- LEVEL2.sub_num)/(CASE WHEN LEVEL1.sub_num=0 THEN NULL ELSE LEVEL1.sub_num END)*100,0) ,0)  sub_num,

  3 AS level,
  '偏差率%' AS line_name,
   LEVEL1.node_level,
   #{flow_id} AS flow_id
FROM
fp_guest_storage_node_plan LEVEL1
LEFT JOIN
(
SELECT *FROM
fp_guest_storage_node_plan
WHERE LEVEL=2) LEVEL2
ON LEVEL1.plan_node_id=LEVEL2.plan_node_id AND LEVEL1.node_time=LEVEL2.node_time
AND   LEVEL1.nide_name=LEVEL2.nide_name
WHERE
LEVEL1.LEVEL=1
AND
LEVEL1.plan_node_id
=#{plan_node_id}

	</insert>

    <!--根据流程查询对应的客储数据-->
    <select id="getCustomerStorageByFlow" resultType="java.util.Map" parameterType="java.lang.String">

SELECT
	nide_name AS node_name,
	IFNULL( report_num, 0 ) report_num,
	IFNULL( visit_num, 0 ) visit_num,
	IFNULL( little_num, 0 ) little_num,
	IFNULL( little_per, 0 ) little_per,
	IFNULL( big_num, 0 ) big_num,
	IFNULL( big_per, 0 ) big_per,
	IFNULL( sub_num, 0 ) sub_num,
	IFNULL( make_per, 0 ) make_per,
	line_name
FROM
	fp_guest_storage_node_plan
WHERE
	flow_id = #{flow_id}

ORDER BY
	node_time,
	`level`
    </select>

    <!--根据流程查询对应的客储数据-->
    <select id="getWeekDataByPlanNode" resultType="java.util.Map" parameterType="java.lang.String">

SELECT
`week`,
IFNULL(plan_add,0) plan_add,
IFNULL(plan_total,0) plan_total,
IFNULL(plan_task_per,0) plan_task_per,
IFNULL(actual_add,0) actual_add,
IFNULL(actual_total,0) actual_total,
IFNULL(actual_task_per,0) actual_task_per,
IFNULL(bias_value,0) bias_value,
IFNULL(week_bais_value,0) week_bais_value,
IFNULL(bias_per,0) bias_per
FROM fp_guest_storage_week

WHERE plan_node_id=#{plan_node_id}
ORDER BY start_time ASC,end_time desc
    </select>
    <!--删除数据-->
    <delete id="clearNewData" parameterType="java.lang.String">

DELETE
FROM
	fp_guest_storage_flow
WHERE
	id = #{flow_id};
DELETE
FROM
	fp_guest_storage_node_plan
WHERE
	flow_id=#{flow_id};
DELETE FROM fp_guest_storage_week WHERE plan_node_id=#{plan_node_id};
    </delete>


    <!--查询流程状态-->
    <select id="getCustomerFlowStatus" resultType="java.lang.String" parameterType="java.lang.String">
SELECT
approval_stuat
FROM fp_guest_storage_flow WHERE id=#{thisNode_flow_id}
    </select>

</mapper>
