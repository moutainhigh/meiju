<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <contextName>visolink</contextName>
    <springProperty scope="context" name="logPath" source="log.path" defaultValue="logs"/>
    <property name="LOG_HOME" value="${logPath}"/>
    <!--输出到控制台-->
    <!--   <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
           <encoder>
               <pattern>%black(%contextName-) %red(%d{yyyy-MM-dd HH:mm:ss}) %green([%thread]) %highlight(%-5level) %boldMagenta(%logger{36}) - %gray(%msg%n)</pattern>
               <charset>utf-8</charset>
           </encoder>
       </appender>-->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <!--<pattern>%d %p (%file:%line\)- %m%n</pattern>-->
            <pattern>%date{yyyy-MM-dd HH:mm:ss}|%-5level|%thread|%c:%L|SMAN|%message%n</pattern>
            <!-- 控制台也要使用UTF-8，不要使用GBK，否则会中文乱码 -->
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- 按照每天生成日志文件，后面的root会输出到这里 -->
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--日志文件输出的文件名-->
            <FileNamePattern>${LOG_HOME}\app\info\log\%d{yyyy-MM-dd}.log</FileNamePattern>
            <!--日志文件保留天数-->
            <MaxHistory>10</MaxHistory>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
            <pattern> %d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
            <charset>utf-8</charset>
        </encoder>
        <!--日志文件最大的大小-->
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <MaxFileSize>10MB</MaxFileSize>
        </triggeringPolicy>

    </appender>
    <!-- 输出SQL日志文件 -->
    <appender name="SQLLOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--日志文件输出的文件名-->
            <FileNamePattern>${LOG_HOME}\app\sql\log\%d{yyyy-MM-dd}.log</FileNamePattern>
            <!--日志文件保留天数-->
            <MaxHistory>30</MaxHistory>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
            <pattern> %d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
            <charset>utf-8</charset>
        </encoder>
        <!--日志文件最大的大小-->
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <MaxFileSize>10MB</MaxFileSize>
        </triggeringPolicy>
    </appender>

    输出错误日志文件
    <appender name="ERRLOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--日志文件输出的文件名-->
            <FileNamePattern>${LOG_HOME}\app\error\log\%d{yyyy-MM-dd}.log</FileNamePattern>
            <!--日志文件保留天数-->
            <MaxHistory>30</MaxHistory>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern> %d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
            <charset>utf-8</charset>
        </encoder>
        <!--日志文件最大的大小-->
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <MaxFileSize>10MB</MaxFileSize>
        </triggeringPolicy>
        <!-- 所有error日志都在这里-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!--普通日志输出到控制台-->
    <root level="info">
        <appender-ref ref="STDOUT" />
        <appender-ref ref="FILE"/>
        <appender-ref ref="ERRLOG"/>
    </root>

    需要将日志单独输出的包路径
    <logger name="cn.visolink" level="ERROR" additivity="false">
        <appender-ref ref="ERRLOG"/>
        <appender-ref ref="STDOUT" />
    </logger>

    监控sql日志输出
    <logger name="jdbc.sqlonly" level="ERROR" additivity="false">
        <appender-ref ref="STDOUT" />
        <appender-ref ref="SQLLOG" />
    </logger>

    <logger name="jdbc.resultset" level="info" additivity="false">
        <appender-ref ref="STDOUT" />
        <appender-ref ref="ERRLOG" />
        <appender-ref ref="SQLLOG" />
    </logger>

    <logger name="jdbc.resultsettable" level="info" additivity="false">
        <appender-ref ref="STDOUT" />
        <appender-ref ref="SQLLOG" />
    </logger>

    <logger name="jdbc.connection" level="info" additivity="false">
        <appender-ref ref="STDOUT" />
        <appender-ref ref="SQLLOG" />
    </logger>

    <logger name="jdbc.sqltiming" level="info" additivity="false">
        <appender-ref ref="STDOUT" />
        <appender-ref ref="SQLLOG" />
    </logger>

    <logger name="jdbc.audit" level="info" additivity="false">
        <appender-ref ref="STDOUT" />
        <appender-ref ref="SQLLOG" />
    </logger>
    <logger name="cn.jiguang.common.connection.NativeHttpClient" level="WARN" additivity="false">
        <appender-ref ref="STDOUT" />
        <appender-ref ref="SQLLOG" />
    </logger>
</configuration>
